%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: candels_classification_tree_barpart.eps
%%Creator: Adobe Illustrator(R) 16.0
%%For: Brooke Simmons
%%CreationDate: 7/2/14
%%BoundingBox: 0 0 852 525
%%HiResBoundingBox: 0 0 851.7017 524.5176
%%CropBox: 0 0 851.7017 524.5176
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 16.0.4%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 16.0.4 x691 R agm 4.6676 ct 5.2594%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 80 8%%BeginData: 10872 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FD7FA87D7DFFA8A87DFFA8FFA8FF7DFFA8FFA8FFA8FFA8A8A8FFA8%FFA8FFA8FFA8FFA8FFA8FFA8FFA8A8A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8%A8A8FFA8FFA8FFA8FF7DFFA8FFA8FFA8FFA8FFA8FFA8A8A8FFA8A8A8FFA8%FFA8FFA8FFA8A8A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8A8A8FFA8%FFA8FF7DFFA8FF7DFFA87DA8FFFD04A8FF5252A1FFFF7D7D27A8FF7DFFFF%7D52A87D52A1FF7DA87DA8A8FFA1A87DA8A1A8A8A85252A8A8A8FFA8A8A1%FD04A87DA87D5252FFFFFD05A8527DFFA1A87DFFA1FD04A85252A8A8A827%FFA8A87DA8A152527D27FFFFA87DFF7DFFA8A8A8527D7DA8A8A8FF7DFFF8%7DFFA8A8FFA85252FF7D52525227A8A8FFA87DFFA87D52F827FF277DF827%20F87D52F87DF85252F82727F82727A87DF852522727F8272752522727FF%2727F8FD0527522727522752A827F8FD04277DA82752522727F852275227%52F8272727A8FF5227205227277D2727FF2727F85227FFF852FD05277D52%522727A87DF852A827275252F852F85227A8FFA8A8A8FFFF5252F852FF52%F8FD0427FF52F85227F852F82727275252FFA8F87D275227272752525227%7DFF5227272752F852F87D2727275252FFF827F852F8527DFF277D4B5227%274B52F8522727525227A8A8FFF8277D2727522727FF5227525252FF2727%27F87D27527D7D4B2727FF5227F8FF2727277DF827F87D7DFFFFFFA87EFF%A8A87D7DA8FFA8A87DA8A87DA85227277DA87D7D7DA87D2752FFA87DA8A8%7D7D7D277DA85252A8FF7DA87D7D7DA87DFF7DFF7DA87DA8A8A87DA87DA8%7DA8A87DFD04A87DA87DA87DA87DA87DA852A8A87D7DFF7DA8A8A87DFF7D%A87D7DA8FF7DA85227F8A87DFD04A87DA8FF7D7DA8A87DA8A8A87D7D7DA8%A8FFFD05A884A8A8A9A8FFA8A9A8FFA8A9A8A8A8A9A8FFA8A9A8FFA8A9A8%FFA8A9A8FFA8A97DA8A87D7DA8A8A884FFA8A9A8FFA8A9A8FFA8A9A8FFA8%A9A8FFA8A9A8FFA8A9A8FFA8A9A8FFA8A9A8FFA8A9A8FFA8A9A8FFA8A884%A8A8A884FFA8A9A8FFA8A9A8FFA8A8A8FFA8A9A8FFA8A9A8FFA8A9A8FFA8%A9A8FFA8A9FD04A87DFD06FF7DFFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF%A8FFA8FFA8FFA8FFA8FFA8A8FD08FF7DFFA8FFA8FFA8FFA8FFA8FFA8FFA8%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8A8FD06FF%7DFFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF%A8A8FD0AFFA8FFFF7D7D84FD0AFF7DFFFFA8A8A87DFFFFFFA8FFFFA8FD08%FFA8FFFF7D7DA8FD06FFA87DFD07FF7DFF84537DFD07FF7DFFFFA87DFFFF%FFA8FD06FFA8FF7D527DFFFFFFA8A8FD0BFFA8527DA8A8FF7DFFFFFFA8FD%0AFF7EFFA85252277D7D537DA8537D52A87DF8A852527D7D5253A85227FF%A8A8FD08FF7DFFA852527D52527D7D537D277D52FF7D7D53527D52A8A852%7D7D7D527D527D5252537D27A8A8FFA8A8FD06FF7DFF7D52FD047D52A852%84527D7D52A87D7D527DFF527D7D7D522852FFA8A8FD0AFFA8FFA8527D27%52F852A87D527D7DA827277D7D5227527DF87D7D27A8FFA8FD08FFA8A8FF%52522752275252527D272752FF59F8FD0452FF7D5252527D52F8FD045227%27527EFFFFFFA8FD06FFA8A87D7DA8F82727277E522752F87D27A8275252%FF7E5252522727277DA8FFA8FD0AFF7DFFFD05A87E7DFFFD06A87EA8A8A8%7EA8A8A87EA8A8FFA8A8FD08FF7DFFFD04A87EA8A8FF7EFFA8A87EFFA87E%7DFD08A8FFA8A87DA8A8A87EFF7DFFA8FFA8A8FD06FF7DFF7EFFA8A87EA8%A8FF7DFD0AA8FF7DFFA8FF7EA8A8FFA8A8FD0AFF84FD1CA87DFD08FF7DFD%28A87DFD06FF7DFD1FA8FD16FFA8A8A8FD2BFFA8FD2AFFA8A8FD14FFA8A8%A8FFFD0DA8FD2BFFA8A8A8FD2BFFA8A8FD14FFFD08A8FD2BFF7DA8A8A87D%FD04A8FD2EFFA87DFD14FF7EA87DA87DFD2EA8FD37FFA8A8FD7EFFA884FD%7EFFA8A8FD1DFF7D7E7D7D7D7E7D7D7D7E7D7D7D7E7D7D7D7E7D7D7D7E7D%7D7D7E7D7D7D7E7D7D7D7E7D7D7D7E7D7D7D7E7D7D7D7E7D7D7D7E7D7D7D%7E7D7D7D7E7D7D7D7E7D7D7D7E7D7D7D7E7D7D7D7E7D7D7D7E7D7D7D7E7D%7D7D7E7D7D7D7E7D7D7D7EFD077D7E7D7D7D7E7D7D7D7E7D7D7D7EFD047D%FD0AFFFD0BA87D7DFD0AA87DFD09A87DFD25A87DFD21A87DFD0BA87DFD0A%FF7DFD0AA82727527D7DA87D7D7DA8A152524BA852A8A87D52A87D27A8FD%047DA87DA82752A8FD067DA87DA1A8A87DA17D7D7DA87D5252527D7DA8A8%7D5252A8FD077DA87DA87DA1FD077DA1FD077DA87D7D7D2727FD0BA8FD0A%FFFD0BA8527D52275227F805F8A852525227F805527DF85227272752F827%F8522727A8522752F85227F8F852A82727A85227F8FD06277D522727A827%525227275204FD0427522752A827275227522727F8F8F827047DF852FD04%27F827527DFD0AA87DFD0AFF7DFD0AA8FD042752F82727F87D7DF8272752%277D52F82727F8F827F8F827522752A82752F8F8F827522727A8F827277D%2727F8272727F82752522752A852275252272727F8272727522752A8F827%272752FD0427F8F8F852F8F852F8272727527D7DFD0AA87DFD0AFFFD0BA8%7D7D7DA87DA87DA87DA8A8A87DA87D7DA85227277D7D7DA87D7D7D5227A8%A8A87DA87D7D7DA87DA8A8A87DA8A8A87D7D7DA87DA87DA852527DA8A8A8%7DA87DA87D7D7D52525227A8A8A87D52527D27A87DA87D7D7DA8FD057DA8%7DA87DFD0BA87DFD0AFF7D7D7DA87D7D7DA87D7D7DA87D7D7DA87D7D7DA8%7DA87DA87DA87DA87D7D7DA87D7D7DA87D7D52FD047DA87D7D7DA87D7D7D%A87D7D7DA87D7D7DA87D7D7DA87D7D52A87D7D7DA87D7D7DA87D7D52FD04%7DA87D7D52FD047DA87D7D7DA87D7D7DA87DA87DA87DA87DA87DA87DA87D%7D7DA87D7DFD1CFFFD0DA8FD43FFFD0DA8FD23FF7DA8A8A852A852FD05A8%7DFD43FF7DA8A8A87D7D527DFD04A87DFD23FFFD04A87D527D7D537DA8A8%A8FD43FFFD04A87D2752597DFD04A8FD23FF7DA8A8A8537D2752F87DA8A8%7DFD43FF7DA8A8A8527DF85252A8A8A87DFD23FFFD07A87DFD05A8FD43FF%FD07A87DFD05A8FD23FF527E7D7D7D7E7D7D7D7E7D7D52FD43FF527E7D7D%7D7E7D7D7D7E7D7D52FD29FFA8FD4FFF7DFD2DFF84A8FD50FF7DFD1CFFFD%07A8FFFD09A8FD52FF7DFD1BFFFD04A87DA8A8A87DFD5BFF53FD3DFFAF7D%A87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87D%A87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87D%A87DA87D7D7DA87DA87DA87DA87DA87DA8A8FD30FF7D7D7DA87D7D7DA87D%7D7DA87D7D7DA87D7D7DA87D7D7DA87D7D7DA87D7D7DA87D7D7DA87D7D7D%A87D7D7DA87D7D7DA87D7D7DA87D7D7DA87D7D7DA87D7D7DA87D7D7DA87D%7D7DA87D7D7DA8FD047DFD30FF7D7DA87DA87DA8527D7DA87DA87DA87D7D%7DA87D7D7DA87DA87D7D7DA87DA87DA87DA87D7D7DA87DA87DA87DA87DA8%7DA87DA87DA87DA87D7D7DA87DA87DA87DA87DA87DA87DA87D7D76A87DA8%7DA87DFD30FF52FD057D2751F852527DFD0452277D527DF87D527D527D52%27FD087D2752277D7D27527D527D5252527D527D527D7D5227FD047D277D%5252767D7D527D527D272752FD057DFD30FF7D7DA87DA87D277D7D2727F8%52525227527D525227272752277D7D2727F8277D2727A852275227F852F8%277D5227525227F8272727F8F827527D27F8272752F827F8525252272727%7D27A87DA87DA87DFD30FF7DA87D7D7DA82752FD0627522727A82727F852%F852F87D5227F827277DF82727522752F8FD04277D52275227F852F8F8FD%0527A8FD0527F8F82752522727F82752527D7D7DA87D7DFD30FF7D7DA87D%A87DA852FD057D52FD047DA8FD077DA876A8527D7D7D52FD057D767D527D%7DA8FD067D52A852FD057D767D5227272752A8FD077DA87DA87DA87DFD30%FF7D7D7DA8FD137DA87D7D7DA87D7D7DA87D7D7DA87D7D7DA87D7D7DA87D%7D7DA87D7D7DA87D7D7DA8FD137DA87D7D7DA8FD37FFA8A87DA8FD057DA8%7DA87D7DFD26FFA8A87DA87D7D527D7DA87DA87D7DFD3EFFA87D7D7DA852%52527D2E7D7DA87DFD26FFA87D7D7DA87D2727527D7D7DA87DFD3EFF7DA8%7DA87D527D27F8277DA87D7DFD26FF7DA87DA87D525227527D7DA87D7DFD%3EFFA8FD0C7D52FD26FFA8FD047D52FD077D52FD3EFF7EA87DA87DA87DA8%7DA87DA87D7DFD26FF7EA87DA87DA87DA87DA87DA87D7DFD3EFFA87DA87D%7D7DA87D7D7DA87D7D7DFD26FFA87DA87D7D7DA8527D7DA87D7D7DFD44FF%A8FD34FF7DFD49FFA8A8FD34FF53FD29FF7E7DA87DA87DA87EFD18A8FD36%FF7DFD7FFF59FD30FF7EA87DA87DA87DA87DA87DA87DA87DA87DA87DA87D%A87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87D%A87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87D7D7D%A87DA87DA87DA87DA87DA8FD23FFFD5D527DFD21FF7D7D527D527D527D52%7D527D7D7D527D527D527D527D527D527D527D527D527D527D527D527D52%7D527D527D527D527D7D7D527D527D527D7D7D527D527D527D527D527D52%7D527D527D527D527D527D527D527D527D527D527D527D527D52FD21FF7D%5252527D5252527D525252A8A87D52FD057D527D527D7D52527D525252FD%057D5252527D52A87D7D527D52A87D52527D525252FF7D7D527D7D7D527D%527D767D527D7DA8527D527D527D527D7DA8527D5252527D5252527D5252%FD21FF7D7D527D527D527D527D527D7DA8FFA852FF7DA8A8FFFFFFA8FF7D%7DFFA852FD04A8FF7DA87D7DA8A8FF7D52FFA87D7DA87DFF7DFF7D7DFD04%FFA8FF7DA8A8FFFFFF7D7DA87DA8A8A8FF7DFF7DFD05A8767D527D527D52%7D527D52FD21FF7DFD0B527D7DFFA8527DFF7DFFFD05A87D52FFFF7DA8FF%A8FFA8A87DA852A87DFF527DA8FF527DA8A1A8FF7D5252FFA8A8A8FFFD07%A87D52FF7DA8A8A87D7DA8A8A8FF7DA87D7DFD0A52FD21FF7D7D527D527D%527D527D527D527D7D7D527D52FD057D527D527D7D7D527D527DA8FFFD04%7D527D7D7D527D7D7D527D527D7D7D52FD077D527D527D527D527D7D7D52%FD067DA8A8FF7D7D527D527D527D527D527D52FD21FF7D527D5252527D52%52527D5252527D5252527D5252527D5252527D5252527D5252527D525252%7D5252527D5252527D527D527D527D527D5252527D5252527D5252527D52%52527D5252527D5252527D527D527D5252527D5252527DFD0452FD21FF7D%7D527D527D527D527D527D527D527D527D527D527D527D527D7DFFFD047D%527D527D527D52A8527D527D527D767DA87D7D7DA87D527D52FD077D527D%767D7DA8A87D527D527D527D527D527D527D527D527D527D527D527D52FD%21FF7DFD18527DFD04A8FF7D7DA8FFFFA1A8A8A87DA8FFA852A8A87DA852%A852FFA8FFA852A8A87DFF7D7DFD06A852A8FD1852FD21FF7D7D527D527D%527D527D527D527D527D527D527D527D527D527DFFFFA8FFA87D7DA8A8FF%7DA8A8FF7DA8A8A852A8A87D7D7DA8A8A8FFA8A852A8A8A8FFFFA8FFFFFD%04A87D7D7D527D527D527D527D527D527D527D527D527D527D527D52FD21%FF7D5252527D5252527D5252527D5252527D5252527D5252527D527D527D%527D527D5252767D527D527D527D527D527D527D527D527D527D527DA8A8%7D7D527D527D527DA17D527D527D5252527D5252527D5252527D5252527D%5252527D5252FD21FFA87D527D527D527D527D527D527D527D527D527D52%7D527D527D527D527D527D527D527D527D527D527D527D527D527D527D52%7D527D527D527D7D7D527D527D527D527D527D527D527D527D527D527D52%7D527D527D527D527D527D527D7DFD23FFA87D7D7DA87DFD10527D7DA87D%7D7DA87D7D7DA87D7D7DA87D7D7DA87D7D7DA87D7D7DA87D7D7DA87D7D7D%A87D7D7DA87D7D7DA87D7D7DA87DFD10527D7DA87D7D7DFD2AFF7D7D527D%527D7DA8527D527D527D527D7DFD2FFF527D52A87DA8527DA8A8527D527D%527DFD30FF7D527D525252A8A87D7DA85252527D527DFD2FFF7D527DA8A8%7DA852A8A8A87D7D527D52FD30FF7D7D527D527DA8A8A8FF7D7D527D527D%7DFD2FFF767D52A8A8FF7D7DA8A8A8FF7D7D527DFD30FF7DFD05527D527D%7D7DFD0552A8FD2FFF7D5252527D527D527D527D7D7D525252FD30FF7D7D%527D527D527D527D527D527D527D7DFD2FFF7D7D527D527D527D527D527D%527D527DFD30FFA87D7D7DA8FD077DA87D7D7DFD30FFA87D7D7DA8FD077D%A87D7D7DFD38FF7DFD3EFFA8A8FD3FFF7DFD3EFFA8A8FD3FFF7DFD3EFFAF%A8FD3FFF7DFD3EFFA8A8FD3FFF7DFD3FFFA8FD8DFFFF%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                              
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.3-c011 66.145661, 2012/02/06-14:56:27        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">candels_classification_tree</rdf:li>
            </rdf:Alt>
         </dc:title>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:MetadataDate>2014-02-06T18:14:18Z</xmp:MetadataDate>
         <xmp:ModifyDate>2014-02-06T18:14:18Z</xmp:ModifyDate>
         <xmp:CreateDate>2014-02-06T18:14:18Z</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CS6 (Macintosh)</xmp:CreatorTool>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>160</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAoAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9Cw2EM2mRtHFALqSAFJp&#xA;YhIPUZNmdQUZhy3I5CvjirDPy/8APOn662n6VqVjEdcuLBdQnube3jgsvj4v6MayTTTF0jmjLbFe&#xA;9RXiFaQQ/MiIalYS3Ggi20qe6vdNvbVo7SW6guLS7htlneWK5aJYqzgOnEuDuvJaEq0nflXzz5c8&#xA;yaXqWq22g39lp2np60dzf2IgS7h4s4ltCS3qqVT2O423xVJbH81dCv00uNdEks219Q2m35hhuba2&#xA;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&#xA;XkP0db1YFixDH0alSWaoOxBI6HFVmi6N5y0/VpNRl8vXMzSJIjRxwLCo9QUaiek8XEioK8KUO1DQ&#xA;hVcLX8zVQomkyqpUIP8AQIWYBV4A82iL8gu3OvL3xVqW0/M2VSj6TJwblyUafAAQ1SVIEQ+EseXH&#xA;py+L7W+KoS98secZ7gPFod4sKRC3hjmi9ZljC8d2KKCfBgop2xVj1/p1/p9yba+t3trhQCYpVKsA&#xA;dwaHFUPih2KuxVNbLyp5lvrVLqz0y5uLaSvpzRxsytQlTQgeIxSmek/lr5u1C+jtpNOmtInI9W4n&#xA;UxoiV3PxdT7DFX0birsVdirsVdirsVdirsVdirsVeIfnn/ylNl/zAp/yelxVg+hW9vcazZRXPH6s&#xA;0yfWObBV9MGr7kj9mvfFWQyeXfL9zbyXX1+OzMETO9shjMjlBzoEaXiGowFA56eJICrEDSu3Ttih&#xA;71+TH/KFr/zEy/8AGuKWd4q7FXYq7FXYq7FXYq7FXYq7FXYq8B/OEV88TitP3MO/+wxVBy3XlmeJ&#xA;4pWRG5xpI0aFQ0cFF9VCEJ5Ojmq7VZQT1xVuxl8tHSre1vLiNSYXaRghZxIZi6pslQfTUfFz78ad&#xA;wqk3mCHRIb30tIkae2UV9dmJ5V3pQpGRTvir3f8AKv8A5QLSvlN/yfkxVleKuxV2KuxV2KuxV2Ku&#xA;xV2KuxV2KsZ80fl7oPmS+jvdRacTRRCFfSdVXiGZtwVberHFUn/5Un5O/nvP+Rqf80Yql+n/AJQe&#xA;WJtS1SCU3iw2ssaW7eoByV4EdjUxKD8TEfCT/DFUw/5Un5O/nvP+Rqf80Yqyry55c0/y/po06wMh&#xA;gDtJWVgzcm67gDwxVNMVdirsVdirsVdirsVdirsVdirsVYp5i/LTy7r+ptqN81wtw6qjek6qtEFB&#xA;sVbFUs/5Un5O/nvP+Rqf80Yql+lflB5YuZtSWc3irbXZhgPqAcoxFG1fiiWvxOdxUe+Kph/ypPyd&#xA;/Pef8jU/5oxVl+haLZ6LpUGmWZc21vyEZkIZvjcuakAd2xVH4q7FXYq7FXYq7FXYq7FXYq7FXYq7&#xA;FXYqlum2lxDqmrTyLxiuZongb4fiVYEQnYk/aU/a/ViqZYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXY&#xA;q7FXYqluj2lxbz6o0y8VuLxpoT8O6GGNa/CT3Q/a3xVMsVdirsVf/9k=</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#">
         <xmpMM:InstanceID>xmp.iid:018011740720681180839D1D111F6486</xmpMM:InstanceID>
         <xmpMM:DocumentID>xmp.did:018011740720681180839D1D111F6486</xmpMM:DocumentID>
         <xmpMM:OriginalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</xmpMM:OriginalDocumentID>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:e716c4a6-6fe1-c645-beff-631d77eb5baf</stRef:instanceID>
            <stRef:documentID>xmp.did:FC7F117407206811822AAA6E2602D9E9</stRef:documentID>
            <stRef:originalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:F77F117407206811822AAA6E2602D9E9</stEvt:instanceID>
                  <stEvt:when>2013-08-21T20:47:48+01:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Macintosh)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:018011740720681180839D1D111F6486</stEvt:instanceID>
                  <stEvt:when>2014-02-06T18:14:18Z</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Macintosh)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/">
         <illustrator:StartupProfile>Print</illustrator:StartupProfile>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:stFnt="http://ns.adobe.com/xap/1.0/sType/Font#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>300.106919</stDim:w>
            <stDim:h>184.861757</stDim:h>
            <stDim:unit>Millimeters</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:Fonts>
            <rdf:Bag>
               <rdf:li rdf:parseType="Resource">
                  <stFnt:fontName>CMUSerif-Roman</stFnt:fontName>
                  <stFnt:fontFamily>CMU Serif</stFnt:fontFamily>
                  <stFnt:fontFace>Roman</stFnt:fontFace>
                  <stFnt:fontType>TrueType</stFnt:fontType>
                  <stFnt:versionString>Version 0.7.0 </stFnt:versionString>
                  <stFnt:composite>False</stFnt:composite>
                  <stFnt:fontFileName>cmunrm.ttf</stFnt:fontFileName>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stFnt:fontName>CMUSerif-RomanSlanted</stFnt:fontName>
                  <stFnt:fontFamily>CMU Serif Extra</stFnt:fontFamily>
                  <stFnt:fontFace>RomanSlanted</stFnt:fontFace>
                  <stFnt:fontType>TrueType</stFnt:fontType>
                  <stFnt:versionString>Version 0.7.0 </stFnt:versionString>
                  <stFnt:composite>False</stFnt:composite>
                  <stFnt:fontFileName>cmunsl.ttf</stFnt:fontFileName>
               </rdf:li>
            </rdf:Bag>
         </xmpTPg:Fonts>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <pdf:Producer>Adobe PDF library 10.01</pdf:Producer>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -524.518 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 524.518 li
851.702 524.518 li
851.702 0 li
cp
clp
379.744 487.019 mo
277.697 487.019 li
277.697 447.333 li
379.744 447.333 li
379.744 487.019 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
.553674 .468574 .463813 .119448 cmyk
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
379.744 487.019 mo
277.697 487.019 li
277.697 447.333 li
379.744 447.333 li
379.744 487.019 li
cp
0 0 0 1 cmyk
@
803.54 487.019 mo
701.493 487.019 li
701.493 447.333 li
803.54 447.333 li
803.54 487.019 li
cp
.553674 .468574 .463813 .119448 cmyk
f
803.54 487.019 mo
701.493 487.019 li
701.493 447.333 li
803.54 447.333 li
803.54 487.019 li
cp
0 0 0 1 cmyk
@
819.295 85.0142 mo
612.306 85.0142 li
612.306 45.3296 li
819.295 45.3296 li
819.295 85.0142 li
cp
.0523384 .0376288 .0376288 0 cmyk
f
819.295 85.0142 mo
612.306 85.0142 li
612.306 45.3296 li
819.295 45.3296 li
819.295 85.0142 li
cp
0 0 0 1 cmyk
@
567.308 85.0142 mo
294.088 85.0142 li
294.088 45.3296 li
567.308 45.3296 li
567.308 85.0142 li
cp
.0523384 .0376288 .0376288 0 cmyk
f
567.308 85.0142 mo
294.088 85.0142 li
294.088 45.3296 li
567.308 45.3296 li
567.308 85.0142 li
cp
0 0 0 1 cmyk
@
238.47 85.0142 mo
41.3452 85.0142 li
41.3452 45.3296 li
238.47 45.3296 li
238.47 85.0142 li
cp
.0523384 .0376288 .0376288 0 cmyk
f
238.47 85.0142 mo
41.3452 85.0142 li
41.3452 45.3296 li
238.47 45.3296 li
238.47 85.0142 li
cp
0 0 0 1 cmyk
@
%ADOBeginSubsetFont: CMUSerif-RomanSlanted Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /CMUSerif-RomanSlanted def/FontInfo 5 dict dup begin/ItalicAngle 0 def/FSType 0 defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 32 /space putdup 65 /A putdup 68 /D putdup 70 /F putdup 82 /R putdup 83 /S putdup 97 /a putdup 99 /c putdup 100 /d putdup 101 /e putdup 102 /f putdup 104 /h putdup 105 /i putdup 107 /k putdup 109 /m putdup 110 /n putdup 111 /o putdup 114 /r putdup 115 /s putdup 116 /t putdup 117 /u putdef/FontBBox {-1088 -387 1527 1104} defendsystemdict begindup /Private7 dict dup begin/|- {def} def/| {put} def/BlueValues [0 0] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings22 dict dup begin/.notdef <1C60D8A8C9B6ED05DB61C47A92CE0500C637070AC8AD8914CFF71E5E61DB950A6E98279E7163EE5637A2531532511E96989F991BE4A7B373BFCC504DE96B39ED9DCD769E5CE0EC52537F5F57232F8D2F83> |-/space <1C60D8A8C9B81F2CC3> |-/A <1C60D8A8C9B6E3FA5F54A0E7B5B24B85FD0319D44A2896B3F6199530A1E687AAEA115C362767D26E172FEAEA5D74042701C07A9B05D1024E457F5ECFEC0904B0BF5817E2FD55253BB1B10F78503D75603CADB4ACE37436AC809B96EA44153070B4AB22C51AA380DA0916618F9E905A7656C0F227F94435BAD97EAFB9BE4317621871F7DFE7E2783E78E5B0AC2C1F329D2A1E5EE73B10D30175C7105ADC132C3201F0244356DD19180BE6A792AFA51EED680B30142A8AE5EFFB8C50A40591158299188114B905F8951E82F72BABDE13732B26185F568529> |-/D <1C60D8A8C9B6EEDBB3D1A976D34BC1BD13601EBAD8E78C621483FB83D6F0D83DE179F90D5B9093828ABA11E8523DA22EB2D86F1EBEDFB2027F3780F367BB1D081182ABE8D40710CCF24388C0263651CC1C8525D98F3D74BEA4CC9B3A72712C86F1B8BB035DF6DFECBE0D64CBF0D0228CAEDC97E7E872BC149327A5E19A350989D7311A857F57D7D3A944FBEF06987E698AF101C8A262934EE56D8548537E6EF4C07435D564048C176C5A71C5F64579A19FEE5B51D975833AC532AF403E2F08D2C953E1D98E4345211A7CB6> |-/F <1C60D8A8C9B6415B4B91BE98EDC65D00B306E09A1DDBACD53994439BF2295B231E2B394D49C60875A3B53243D76AAE30E5AE2C36F787BAD87E7F2EA9F996F2DF72DC499BABCA6FC570ECB1AE81FE8999435880E1A7A75E2AC54A2EA5961CFD1F39266258B13BF5DC01AB550E08355DC388FD4DBB4A4281D1F405C5C44A1E7CFE8C3DDE9F2711C25FF7D59E73BD1E63E619C9996B459A008E04071281A07532C71922CC0A9153894F031ED441757CF0BEF2945291B454B94C7C4561E9740493EC260FD6627F0F58960DA659FAC5> |-/R <1C60D8A8C9B615D1AF759C084864D15DFF186717F63FEB63608846A2A6FD27E1D8521E6484F1605C3B6ECCD3C95E17263E28E4E80D8FD08AA3FA0F709E6096B8D9C27C0FBCD8F0525942C00411F523D6EFDA7B5DE234030A200160A1ABAC0420365D095C8970F99623633C9435BCC9165BF377F22CC0F5C1BB1CE9F3F4943260C730AF1400A033A31C9A568A1F4FC13A344A523B8FEB3E7AF509BD4BE087FBB6098896C6695F85BA946BB7F3D85A97D6B18CBF7BD555047E15306D7A93BA7DAE4B48E9C4EC4DDBFDBA8A0C33720E1BD5D02DD5CAD2A8598A08F19A52153150E3E1305874789976D9EBB2CF667E6843255522E85384190961C58C562850983C87A15CDEC04EDBECA53572EF643B13D72250BEAADB1758F5C8C7AE2B5A8E1A072884E82812753DD66AE6CE2C51A6C8420E1012D2342C5606E0BC1B58DE07BEECDCA42673158A13F65245D0BECFC07FEF99756D395EC25104C07E5E6A96800124431120262CADF48D4D70A739C4A303A3CD950B284F1E541065F0F4BD7ACB770D6A2980D43652ECECA043CD10F1D469D61F0C88B849975F57840A1BF343CA52357F28> |-/S <1C60D8A8C9B790A87A1BB1F54A156404C1DEB44FF99B6DB2E6FE92E68B54CEED83C2E0E5E444D868281F8B6D5FF2548BED62DDFA4FC2C2BCA063E935805C7E9548CC1B04CC9E318B0A70B7F9B5CF83F0EE746A1E46431798801E64499454C105C6264E5B9B52791DF72C5FD5F5BD5F0B6FF65595637EAB331528B9F0E564FEBCB90E182D67B33615D81182CE27F42F6137FEA70D2BDD8D12799C096FD84961C2D93EA1B65F8FE42AFA0170E005BC7B939693CB1B37465CEA4D320B4118FAAA60A2E65304D78D02A5031D60E182CA848A575B77F132A9BA9A76FCA3041BCAF696A3C245421AE6768DB1023A527E5963B13123E7A11D386AA031B679FF621B0FD1FE2489E5E1E2485B1E2A827F9CDF8F86D1D9AD4457ED20087B8AF16FF69C1864E97F17AEABE784407B86993E31AE648683> |-/a <1C60D8A8C9B7A73D9A89BAED94C8D647E11B8DA777952BE30DC067BA2F51C4898D18ECD85A7FAAA090899F4701CE422912265B308E4EDC7DA0FB89EF36D1BFFCBF967A02815F293810B83A57FD9F82D44C36CFF8E68627E20208B923596E1CD47177EEC0F4CC1D4A6C9683DA65B6691699E11FFEBB080F2EFEA91E8E01CF798C0BB34C018E9D36E58A0F06D1E3C3F02330E7142C985C7C2F0921709A60FA4AFA3D66D3BA80B3DB282878593DEB04B650A9B3D346AF1155953CD2AD901C353F921F34F36DFC37C1A77BC64F081882A7F4C79B3AE612D3B02C2614965B0C0F109DA666319899D8EC06A03C1675A539E81E479E53C52DDC9176FF553BF411F2BDE562541CE5D2FB1F1A47DDE309EF7D874A141CADAC7062489A08318E79E39E4C0D38742903151E46E0A7CA365BA50252CFFDDB047A776C2BEB3033F6E936DA62B19C76ABD7F96E6809F3CC70D521FFC2B25A23> |-/c <1C60D8A8C9B77FE2CE12EB30577FA97FC2BE3105FAF107A8055FF53023D8C3993C663FB8C39FA31B26D263E61B8D39D8577F105CBB496D707DBC790B96C150A9D706D40C50B306623BE1A9B60F4F5DF07DC56B6EDFBD5153BFB71170B5800A1AEA54F231726C3BFFF2338ECF07E7445B429550CDD67B4DD4E947C21F944A699CCE26345298717DFB5C9164CD2D5C15809DF7972AD1DECABA5A707A9209404C2477E7233FBC6CC03DAFB1D6BCF19A29309A21CCE9BBFE7BBB87B24E3945FB5DC27F41E85DFEC969D8016062E22E1AFF40> |-/d <1C60D8A8C9B790A84174B33980D44508F950453586E0CB2C3CC0488BC667E1C8393B0B2252121D38E4F5CF544444FC0625828E1865D0B25958144996EEBD56B9D12929B650E87A72337A9BD992BCB5392259B4F4353B24907BB4ED78EE49B67493E3E26891120903D90D31F885DA84C37D887F1ED9AEDFE76B6BF163108AE0A1B1FEBE19A7C3AB10D5790D6A9E903B9D9B40D67193B1876BD2C8D1D1C269DD9C20F467EEC83188F53FF35922E4F5A175E5C22D4BE122D14695477BE5129C721F5B07F7075FD0048A8D1AA085F2990E6E1B8953DAD0D8DEC431C565C7DEC7E965CC8B69B0A22082A60A028941575EB1091CB0F526A0C4A9044A66A057B686371B675508423E40F74C6810> |-/e <1C60D8A8C9B77FE2CE19B41007D072692967B334D4FA9E9F1ED17002331BAE2FD41084F6713E7714DB837E4CED3AD7EFE0877595C9911D716802D563F328CC04CBF10B051E83E111B0FAB77513553CEF0835AD5F26A97A2F4F7E1DE5BC4537CC86CBD02836616238991A9008D28790A8A9C38275AB0E82C5130533B1294B20983CBF4AEB0E6E7BA0F8615F0E6F2F78A8050BC3FF6999FABEE86096C895961A59D8FE0FCC0D920BA064655A794B19D54504B9C6D438EBA0B1B83012D10E76ECB8750827DD1DE1F53E0E7E445E6832B38CB88E718BC569CAD2F5> |-/f <1C60D8A8C9B83BB8402BE73F3920E7A240F7882D8B356E9419C9970BE001101F03E6F0D505379D87A963C9CC90DCB75D26E125265514C97F4B14DBBFB0678E07C0B2ECE0B61C7A5FE55ACB6F3714E49227585835F05221BA469C0DFBC6C9B89F8DE269E83D7F0ED05064EAB5798DB428B2F0FCD3CD962746F8F2F4609616BD82437F3B4BB0AB021FE226973FB768BA81DD700D8A9BA9CC50F284A221D40DAA074CA2FBEFA74DF8E1C13D46320A90866BB9E7EA74C6D1934ACE5142E29DE58B17552542EF3E8808B08793E46CFB6078D6F4C7DB7CEEB063AD2598DC15FA0419D99D431A4E> |-/h <1C60D8A8C9B790A8415DF590259A1FAEC6AB234C0CC5E8D6C1457B778B68B8B61CEB1D50515636A5CABA17D50B764CF0A37B3B049CD5156C0CB1FB38686C7B494DA6D2613E8E8E46BEEF24056DB312E84C8FCF8B757D9A02A9DE80AEBFE55A95F9086FD261558376C5BDD6C6D137A059019D8DDDC8CE06BFC38425291F63984D50A354795A58D4A100D6F898B5EE629A86890BB7A8F3C132DC039D92891694EB9164AE25A1854DD55F45E6BAA078817EF5C82800D1F6162135E366537D1A01A51B4BB798691533057C002F641FD5A240D8854C9C9A8D4C8DDE9E905A8A82ED8821D7447239114AB02B93ADBCC9E4B43CC9C6F00B00B729AF9A15BBC8DA646BE80A7EFBE171DAD7011E> |-/i <1C60D8A8C9B85744183182B26E43D2250B5E96C516249D6690CA3F5ADB11A6CD8628BD39EF45370402406B6CEEDC1BD592C05A4429DA68F75C16FF3262A72E29C5DFDB12C52860CD260A4C6D119F04280D17E90CFEFA1B3BC40BCFDD9C232B5DFDC828188A625E4A2B40DAAB61C23DAFB65C42AFB22AAD56B151C21C255B0045F4DD058452FDE7C6295F91B9E6D69796A4520DEB3B8F4329EF56EF2909A4AFC6FF1C7F9C4AD2366E65C4D5C8CE4A148B712EC197D7786CA12F9E> |-/k <1C60D8A8C9B78C66E349E018714775D7F2A66B893319E36FCFC1A12E2387C0EE1C94D25D8D100889747CB49A1A7720980D7C26AAC2514868574516D99730C3184A4BECD2CF16076BF050B985387E9F387CEBA6326FAA20C80F6816D8AB502E5E1504D8CAF6A23FE8862DBC929B61E2BAF5D4344A5A2B3338EDF88069BB82386A8D59C1C3647E56F6E735FAE26AECFB4508AAD7CD213E9728BD7A39E1AEC8433866F6FAAF3DA6249C09D7275AB32312E6615B7328ECA6BFAB2B1616264A0168BDF91A94AB042045F0440410FDAC0A77CF0F1FF7AD74AF7B8B0CB5932DB7A98E78B267BBD02F8D62C7D699F139E801367BA1C92D7A0318C18A8048A54B02A0D48BC638F98100A3C65B2753> |-/m <1C60D8A8C9B6B41CBB543C39FFA3F67B043052E0EAF65905A8AF7770F401E5C214CA5AAC44B1B77928E61FA120F74CD8814FB00D1DA6117C9BBEF9C73A2EDF1C1F946BB5A39F298965B7826D787D7CCC50900D8AACA5D3407C4C2E0414E93AC0F7BDF7C01F4D40118AFA620180702D606EEF072244BE38DEEB45BC882F7498A4E7E88ED38B749B0D0C7B8DADFFD668AFB99D7E4805A703D5D3D2DFCDEC94D0AEE63ACE88B7CAA05D1D789BEFF2FF9AF2DA822CBF4076E5EF7847AA4248B2E42F954CC3964EDDEFF7267A5FD8F6336B3BDF186D94918C0CA1DCDD8A61ACC4AA9F32A59DB6C437BC22E5018AC1ED650DD62B5903B0F8211323D6EE3AC0BAC60FDF50D7D237E768991F590B131A2A425056A0E27ED97B970A966B78C19E5424F7B79671F594E2F61CE803F0BD5582D086701C13972EF5465E5226B351F846A4F581D65C964FC21977D1AB2B6A69D0283307238114100A96DE85941DF3A85604DDEF5D07A8CC6B18737602F831A2FFE69C31A2DDC4F8B9B50330CDBA6BF97161D0AA1F231CC5610893B7123BD1C98B40F4797D> |-/n <1C60D8A8C9B790A8415DF590222D4BA038A5E1C03D064152804DA5595FF1D3C2BB03FA738DB5739059E0BF103B58BF1C70D81679A59A5A0B91FA662B87AA853167386E7D83C7EFC655BBA875F7D6B37DE39B03BB0D124472F8247789F5020B2587A91B94B213A15349C6DF051269E809FFEA6BC78690B3028EB90BC67FE994AB754D2296D19E2305B742770E3A76EA3B11387A273E5590D6FB667CC10F900CD07B3129A4F5ED9EA05D5F90599E995BAF3F48C110C80920A7F68EF16E2FAD8FC91387165B5D38B4BE2ED3A475457A8094CC1F491AADABFF6C441ECB504558FD0B0B699FA08CA4515188A4D1F31975728B86BB50382F0C26D88E6D3069422C387BB4> |-/o <1C60D8A8C9B7A73DB9200145F77496087091B4C7340298A35D4FD0DCE48921834F73D1C4EA7CEDDDF0807B8E434E24C18DDAEB2BBA501AEA0EADAE224D41C4A6586D8E4FD26031F37071E3A8B68E4C5EC867246DF0D76901DD50CD37DBD910B50DE1077744B620F62F0ACF6AC198AF0CB41118139FE629E8638B796410EB51C737F4C323C77468229EE30F218FF13505CE5835D22924D176DA74232851440EF5AB04397A42DCAE0E5CDE15042788462977B030A781CC4D29C583BE6C4A5D9E6A229FE57744FB3EE62C> |-/r <1C60D8A8C9B734784A7965385EF0C5465DB6AD64DA2808563C84FC592DAE15CF2DBBB83C2DBC44B9410339F575FC895588FB871F630ACB5E3052CD576C328B55F116A56661DF69FCDDD3779EC46F5938EDBD434CECD14668928A0ECF67C75AEE5F8BC5EB8167A39150EA8C22E64F815918D275AEE15C12B6907D9A17E7B6AF9911B28DB914CB8DD0CBF4CB301072F3B9578DE86402BAF5EEEF763298ED74996AF8F4BB8BD830F4D093CFFA0BED96CD627B5579F26AD410AF69A0EF98DD894908231DA4C63EBAAD35F7D02F8CCE327851948584D4C8CD1F74537CC34B91EDC56692CBBF24142499> |-/s <1C60D8A8C9B731072187A290AB0A1B155374073796027AA74B9A352DF76FC1F8E646D404762305126BA47044E52CB365C870BA4343C11B503AE62A1805B5EC285D059C073834775A6BD9BD51ECC45060A4BE2320CB3B950323CFA9362577618B55A5E1E3BB533C4A8294CFA51439721E2B86F6E4360C9EFD0F618A9175D10CE77CC2B2594B5B22EC9B3290445A95660C001684C6EFFCA7ADD3FE2C5FD4D826D63DAF50C88B113EC96F38AD1AD7C710A456E107E0909185C5B410C3035406F460F078490021F117BDAB71D3E713335B385E85F8132F8C29C603C6949785C82EE80C2860DA3534D9A96F80AD731F68026D8A016EA241452552075FFE79D11E4EA23F66A51175DB533AA70F4006E5C52C1F988E4578DA4CB21486231819F6B70A62AC9C4342A86484D72E476B4B312BBB4A312E73D34545D73D795B344A32CDFE5ECBBBAD546BAAA7D65BE4DD937F84F965CD16F9264141BF9458252F103DF022DA32ED0761DB48C45B2A31B613815549BE2297C9913487F7> |-/t <1C60D8A8C9B737EC2B9BDF3DF41B0A5BAE6C2EA7C8A84B3265F48F1104D7CBD3535D36D2B98135F7BB48DE2D49EB635F164E7A8AAA282035C5FBD8FFD580DE559E19E03C9D9D32DB8CBF1DB8924F5D7C6E773405E5C0CC89E18759F4AB953C931C0DAAD0BF81C74ECFBAAB4D11CDA4F2CA743747C660DAA8476E616938C778D4CB5142B584F4936F031AC29CE6F5251BD97970B3DC4A> |-/u <1C60D8A8C9B790A8414B0F29B6F7F0604F1219901EFB32219E51A601A7E804F32A0D8D6B8D7A022F8EE28B2935B166DB2B8762F013CFE0CA6A672384EA23ED56921100932921CC04120ECC8F315DED9172C974EA4129F778AF215946D1D1D471D36CFD27F0D3B6FD820ABA966FBE859DEEFC9698A76B91FAE6A7A0F726DA9035A8CE095655B25CD24F34F744DCDB1DB3C2FD92C696493E6417867A4D8A39CD876346D54F2493CA300176C10C4E27AEA4BE317D26FB57127B4B2EE743D221F6B29DC90C2BB75B112ED9B1E3DB498955C55F25212D8AAC6F5CE57888EA5A518FFC8DE237A920149CD6B9D21C21FCD55BAE3D8D0B35D92F701CA11BC2858B804468A2B1D5CCF1090644EF065C7D8CEA9843878A10A481C3E1A02E6CFF64D2903225> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/SJROJC+CMUSerif-RomanSlanted /CMUSerif-RomanSlanted findfont ct_VMDictPut/SJROJC+CMUSerif-RomanSlanted*1 [32{/.notdef}rp /space 32{/.notdef}rp /A 2{/.notdef}rp /D /.notdef /F 11{/.notdef}rp /R /S 13{/.notdef}rp /a /.notdef /c /d /e /f /.notdef /h /i /.notdef /k /.notdef /m /n /o 2{/.notdef}rp /r /s /t /u 138{/.notdef}rp]SJROJC+CMUSerif-RomanSlanted nfSJROJC+CMUSerif-RomanSlanted*1 [24 0 0 -24 0 0 ]msf313.114 72.1719 mo(Smooth and R)sh465.344 72.1719 mo(ounded)sh627.31 72.1719 mo(Features or Disk)sh58.5498 72.1719 mo(Star or)[13.3193 9.31152 12 9.38379 7.99219 12 0 ]xsh131.94 72.1719 mo( )sh138.637 72.1719 mo(Arti)sh181.979 72.1719 mo(fact)[7.32031 12 10.6553 0 ]xsh272.26 212.066 mo
187.221 212.066 li
187.221 172.381 li
272.26 172.381 li
272.26 212.066 li
cp
.193668 .150057 .155337 0 cmyk
f
272.26 212.066 mo
187.221 212.066 li
187.221 172.381 li
272.26 172.381 li
272.26 212.066 li
cp
0 0 0 1 cmyk
@
%ADOBeginSubsetFont: CMUSerif-RomanSlanted AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.systemdict beginSJROJC+CMUSerif-RomanSlanted dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/Y <1C60D8A8C9B6E3FA5F16D60D55CDF35373427EF691CC357CC10A8B45801FE295B2814D872A467FDDD0753D7E608163CBB881B5D7534B5F2ABC50082217773EB88D862F5AB7B404A5848B8B97B25162519E525E388549E0AB537BE24DE4B007C893DD0C0E6ED313BF31508CDC2339AD7EA49517C81382EBC9969E6D5D63F45A53F65441FB53E3F84E1B3ED22F4FB951F14FF83A1CC8450FB13BC643CBDAF1C991F6354A6C4FF2F2686FB0FD20D9BC802F24C75A43147B71933CC146ABB33B> |-systemdict /gcheck known {setglobal} if end {end} ifendSJROJC+CMUSerif-RomanSlanted /Encoding getdup 89 /Y putpop%ADOEndSubsetFont
/SJROJC+CMUSerif-RomanSlanted*1 [32{/.notdef}rp /space 32{/.notdef}rp /A 2{/.notdef}rp /D /.notdef /F 11{/.notdef}rp /R /S 5{/.notdef}rp /Y 7{/.notdef}rp /a /.notdef /c /d /e /f /.notdef /h /i /.notdef /k /.notdef /m /n /o 2{/.notdef}rp /r /s /t /u 138{/.notdef}rp]SJROJC+CMUSerif-RomanSlanted nfSJROJC+CMUSerif-RomanSlanted*1 [24 0 0 -24 0 0 ]msf210.99 196.474 mo(Y)sh226.806 196.474 mo(es)[10.6558 0 ]xsh804.328 212.066 mo
719.289 212.066 li
719.289 172.381 li
804.328 172.381 li
804.328 212.066 li
cp
.193668 .150057 .155337 0 cmyk
f
804.328 212.066 mo
719.289 212.066 li
719.289 172.381 li
804.328 172.381 li
804.328 212.066 li
cp
0 0 0 1 cmyk
@
%ADOBeginSubsetFont: CMUSerif-RomanSlanted AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.systemdict beginSJROJC+CMUSerif-RomanSlanted dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/N <1C60D8A8C9B6E3FA5F649AD7EA5F70CE6008ED62C65E19815131C34DC91ED5F014EBDFFE9E4609B67F9215975E9AF61082B5A208E1781E1AC7D2F7966FB6EA4AFF83B8FD42D2169B834DCA32F32F8A0F69244848729BC290D052990DA9554A55350EABDE0446A7FD9546C74DB3B72A7A5A069DC492472268606E42BCB46C43F0CBFB435E1A1938365F328F9E26DA7938E8F693F6FB52DA8B1CC22ECB62741457598EAA03D61FAB3BB15546993CDC89D984AC04F5FDA3365832C2734EA215EB13FCAE88ABEAC420045AE4B6A7A000478A360050467FA46575A2E689FB08AC1102353D8ECFD395470CC8B0A042DC9987555711F820FC340EEC569A0EA38D290635> |-systemdict /gcheck known {setglobal} if end {end} ifendSJROJC+CMUSerif-RomanSlanted /Encoding getdup 78 /N putpop%ADOEndSubsetFont
/SJROJC+CMUSerif-RomanSlanted*1 [32{/.notdef}rp /space 32{/.notdef}rp /A 2{/.notdef}rp /D /.notdef /F 7{/.notdef}rp /N 3{/.notdef}rp /R /S 5{/.notdef}rp /Y 7{/.notdef}rp /a /.notdef /c /d /e /f /.notdef /h /i /.notdef /k /.notdef /m /n /o 2{/.notdef}rp /r /s /t /u 138{/.notdef}rp]SJROJC+CMUSerif-RomanSlanted nfSJROJC+CMUSerif-RomanSlanted*1 [24 0 0 -24 0 0 ]msf747.112 196.474 mo(No)[15.8159 0 ]xsh850.894 37.6079 mo
850.894 42.1621 850.672 45.854 838.064 45.854 cv
13.3291 45.854 li
.721191 45.854 .5 42.1621 .5 37.6079 cv
.5 8.74609 li
.5 4.19238 .721191 .5 13.3291 .5 cv
838.064 .5 li
850.672 .5 850.894 4.19238 850.894 8.74609 cv
850.894 37.6079 li
cp
.0523384 .0376288 .0376288 0 cmyk
f
850.894 37.6079 mo
850.894 42.1621 850.672 45.854 838.064 45.854 cv
13.3291 45.854 li
.721191 45.854 .5 42.1621 .5 37.6079 cv
.5 8.74609 li
.5 4.19238 .721191 .5 13.3291 .5 cv
838.064 .5 li
850.672 .5 850.894 4.19238 850.894 8.74609 cv
850.894 37.6079 li
cp
0 0 0 1 cmyk
@
.75021 .679683 .670222 .90164 cmyk
%ADOBeginSubsetFont: CMUSerif-Roman Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /CMUSerif-Roman def/FontInfo 5 dict dup begin/ItalicAngle 0 def/FSType 0 defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 32 /space putdup 44 /comma putdup 63 /question putdup 73 /I putdup 97 /a putdup 100 /d putdup 101 /e putdup 102 /f putdup 103 /g putdup 104 /h putdup 105 /i putdup 107 /k putdup 108 /l putdup 109 /m putdup 110 /n putdup 111 /o putdup 112 /p putdup 114 /r putdup 115 /s putdup 116 /t putdup 117 /u putdup 119 /w putdup 120 /x putdup 121 /y putdef/FontBBox {-1135 -387 1495 1094} defendsystemdict begindup /Private7 dict dup begin/|- {def} def/| {put} def/BlueValues [0 0] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings25 dict dup begin/.notdef <1C60D8A8C9B6ED05DB61C47A92CE0500C637070AC8AD8914CFF71E5E61DB950A6E98279E7163EE5637A2531532511E96989F991BE4A7B373BFCC504DE96B39ED9DCD769E5CE0EC52537F5F57232F8D2F83> |-/space <1C60D8A8C9B81F2CC3> |-/comma <1C60D8A8C9B85744180D13F6DA2919694C7E6955B57908620E86BD3C72A8E8A730FEA0D9A7695D35BEC0F00AFDD9D19B179CFED1B9562C02B6BBDF9228FCAF4FFA23660EEF1F5258659079FCBB6790A539A72ECE2CE06BABD9F85F4D2A516C0F1AD298C4F7AF940ADE95A619DB0C> |-/question <1C60D8A8C9B74383BE485FE6ADB18BC659619110ED750142A50E2B51A93FA5F5440B97758EB992021AAEC5987BA156CFB2303D02898E47359DFB0564D1E90B7A6EAD10034621ACC72185808315234A4AC7573912EED404BBC76E985326A8351CF44A335A07F228F5F25D51F277B5FB64818CFD5A5BED008AF88298E1C7A8C972BCAE8AA1444DD7276F8161F95D602481F921B28245C334C7708058045AE7A7CE692C9468A57F366A482BDB2A3E008702C21C7C5F1FD72B3623EB304AC1A3FBA53484FCBB1EF0B2933998F7D143109EE4D3513CE52BECF772AA2C0F57F89CACB4B1E55F5E66CA0E03D22706033B26E56C431C7E17C2A1089C38C0AE20DE13D03C7A07C35232EDF0414CD805> |-/I <1C60D8A8C9B803805106C492FE56B68F1DBB0C98329E12C14B5139FA8227BF649E91B2DBE454E514E7308FE465B11C5C3DF66689F4C318822F21E7BD8223BF49B54D00096FDA03578B27CB5801793EF5474338BD483D136D8772970C93135277EE6154716D7E171367F74AF216FC36BA813929C8905762E2> |-/a <1C60D8A8C9B7A73D9F856CC42D69435E4A8141A5F895CAFE47440289B094AF156FE140D4C67E7CD3FA83AA1919C9695252AAFA3F2F15B4B80D6CE3D7F5026DEB8F74451B0E596714C61E096E59BDD852D98C05C75CC37608E6878FC07112DCB973D4F7B242B9E1E65096652D5064FC8A664129B00B7E5216E67B0CAF693900C2878DA78232ECBF31A9377E2EB9EF6E40EFA285E9FB935C4F58C3447630F1EC743C244A3AD681721B0384C87896D484C09F7406B7B83AFE938469DE208166AC76487EB84A8CA201E81E38C0B847B0E44944DACA67058A8B24AF74EB0E910184DC507779A43E0DA1DBDA8511C92B8E4193893641CC7CBEAFB6D9AAF670598FD7F8F72E13578E993AF62DE69E8BC8A19CE764489A1F4DE41704B6> |-/d <1C60D8A8C9B790A85A63738B4BDBE32D254332011D901D77442145D46EE94D116950D4988B48F6AFD23E59DC1F9BA02BB4459698CAD82DAEC4FAE4B2DD5CB76AE2BE1CA4A14A02FE580F573E237415CECB852181B2BE51E40E3F1310911DF3ACADC61DA72C0F6246B196E6D75FAD8322DF55A035280A747F283EE6982532D00650D9DF13F3ADDC589FB0381B92761B72FF521EDBE15B91FE1F886F4B4DCEF74FD367D2B115CC7A> |-/e <1C60D8A8C9B77FE2D078C7AA8E115483032D0BAF95090FBC0716D866E31C0A8DD81E80422D48129E71732AEEB4C273AD37A70AC5CD6E1B6C2A319D07F1C8550190E20736CE1C6F6780A1EF397EB09F7C59A692EB40C8F8E78786AC00A5544A5F9079092A4839909A53E501E6057FB6735F6BFA52C87FA90A65F65B1820C760EBD4705CD5DE220D5D08128057C3870D6CAA9BCC3078368B906B463F5A1DC471BD3B25DBCF4141721B3D6FB9779FB85303FE6AC6FB89DF7F8D125BAB2C1034F3EFBADBF600D58F270B898476EE41C65EB55C26CC4E420B3302564C> |-/f <1C60D8A8C9B83BB863E4C35A17B955646EA2C2DDB32524A23F4F7F13FAA83E4201D77CA942BA678F7205927D5FF9758B39849911AAFE82634CD51C8BBC80E56AD6C26A9A35566F80EC2819C2FE7CC32C145458F78FC16BDAE7FB2FF90D8731132CAB737FF9C656468F03D0694B37BD6D6A96C21A93315BC7381C066261867C53553AFDF29BCE989857620F738AE0ADA78A9FF3C8BF494948240F41C835FCC849EA9BCBCFDA167F6DC2131AF82066F747003DD941453DB0C7E5> |-/g <1C60D8A8C9B7A73DA6288BFC2BB828410E048CFD3FCABB367770331669AE8F737BB15FFD582BF61CF37DAAF934E20D7A19C6C24B3410034D8EDB1BDB3D8D5B045D8CEC8A978EE080794297A1FF10EF6F31F2BF0837C8ACBA5F209569639F64A8C2F7DCA04B1EF4B30E57F701C89EDBFAB9430FAAE32495FE81B9748F306D801B498BEFD11C6F611856C0D368E0BB81EB8CEF5A88563A35C5F063BBEDAE2456A01247454895A261D4CD885C5C8DD91D25F35EAEDDBAA492DFDF2AA186C4CF8AC31405F23AD5D663D092E32E1B616715CB08E7BB3D2E8984E372DFB0F7BABEDFDEFCD386BFE583CFAB3D0D9A7B8A8405787127E8814A8FB95CEFDE7A52CA2F71BCBA1EA481C32EC649B836BCC3C6A5FAE739F3B0D902EA3DBCBDABC53C80D6545BB4B4FA797FCE605E3637E8C54D2474F669B8E5386BE0901C8A35717EE9C8FE539719D85A01CEBB237E6745B01A21D65D1D52C641DEEA4347B673093ACB0FD717BE315F396E21BA15D6F58023C6EC38658E0E093F> |-/h <1C60D8A8C9B790A8415EC71DE23A43D44AB0D9D6402A2C8CCB67B9736AABD8849E98A33306CA648D28B6C9A0C004A5CBAB06F6F56B156891ADA5D1781597FFDEBF0597003481826AACEB7EFC7043EF67E53081EB5240C294297E9992C4017BD0AA6872CC9A181106695A637A00996DC4B3B0F6EE6427BDFEFD9DE5FC7A254FE0D05A56C21A303142AA0E5FCFD78265BAC31FE95C364FA84E20CECF31F0BB4E8B952CB63E042C6D9E2D5C3692028D1F3714A2405F8245713F9A45A0BC665C4B2EF26466B061A67B00353D20970799> |-/i <1C60D8A8C9B8574418376D43B6681FCD7BF7CD189B62CDA25D44A1794B42BFF18C3238D95E231F3DF77838A565351C221F8BF32C1B402916D85C47057959D9340A8DC5ED053E87735F9F7B22C9A108042A74CD728F662CE30A138DD90A63684E8BF1788E7034D62209C34B1648F6DDBB17A953CECBF97A0884155EEA6460F200BAAE38C7394E9140E4041FFF9572244AAB615D> |-/k <1C60D8A8C9B78C66E348119CEAEC07AF9FFA7947C5E044F4F3F81028A0363ED603D420F2B76EA4263F1FBA9A4F15B93B15081AF1029B9CDE235217F68DE9A453DC725927FB53ED98E2F3BADCE8E5E833462536C0FD6AB3252156AA3306233D123E4D772544C7FFC41D918B4D100C880F128EB55C68DEFADC9447B71BEE11267F83A85DFD51CB251C5A83DD395E87DE4055B7D67DC2B90C246AB40535D1B4A22C1D662E87062775BADBB4C529DA02A5CEC77158A56B17BAC37084CD767465878ECEF9ADB0526D48C74F4273178CE3044EA6BDA7E09B5DC5EBCF6825197D974AAE63A4D090EBE3CB2A54> |-/l <1C60D8A8C9B857441834F97E1AEF0D7E134833CBFCCCC156F7D8E02C8A299F0038131D8B6373A547038EE950B2F819281B8503A7F3E2F3FF9D6869EDCEDF44443906DD091163A4CFA24E1EE01C5FE8ED72C9A1856BF34117C31AE3F4F1838BB20C6E754C> |-/m <1C60D8A8C9B6B41CBB543C39F808A2853579C6716806C666884A5D3ADF66B315E0468552830D762ECFE42E8489667B7B08AE73A01006B4CA61856D7450A89CCB77C3B6E6CA88B4ADCA5DFBC09DC5FAA82481A74C8222EC77620905FA7CDDA4B8DF541A8C59704A193E9A8673135E430FE3693218FA0C4BFA9434E94330CB6598B1291BF97804AE0E26FB784CFA0FDB80F744FB0D0A28468BDE88E1C80600FB21E8B3FA4548768E8423827B7B0B10134EAC3A88878B242FA865718F3D3DF920536D8BAB38C3C8DFAAAB778385DA1ABF04DC7D5908DD94F7DB99BA9196859AFB9B2C24763DEBA061D31FC172819CE844472C165FBFFDCB96CE5083DAE669B651796C3A75D19A08FFE5152EE96890858065136C589E61CBF12B2A3EB07B961436F8C5D52E112BA103F37A> |-/n <1C60D8A8C9B790A8415DF590222D4BA038A5E1FA5C964B9EA28B297B0EBB0993B36459D4BEBB804515A67B2AA37A4CECEEE03883F65AE7940C8F65B5B36CBADCB4EBD4233CF588ACDC3C975AD54623E32D25B5097A349BEBCEAFECF3A51644E58EE92C891F0B50747393E3C91B688F49DAAAC796548F10F292A4B489928C19AAA24C5EEDDA560E033AE300808200A5AE03E85825541D60534E4060994575C93DB6B91CC24425124FAEA71F26A87C1267094B7B506C889B9792D8F345912EA1177BE78E79> |-/o <1C60D8A8C9B7A73DB9AB4CB4CA0ED02A092D16BF05A272B3C8D7B42279C146291FB9681D14F4CE9D6A400DAF927A79B5EABAE8B1B5E57693A54BF162089423230AFADBDC2C17AE5C9E8E6854F3BD27EF78207064AC7535E9484EC776DE1E5228F396F21426A2318D1B44314B1F98EE489A23616D3543252A502C4B582AEDE9F1B001BABE63B45B29F624E8DC24DED063CA08> |-/p <1C60D8A8C9B790A81EC43A9ACCA74C912C3295A3C934FC69074D9A5125BF2D9F0F0256FF54C185FD159574D631C0E48C2D653E5DA01376A2CA0C9BD10A98479798D3593D0620B0A5F9A86D27BF9A9F7B5B178B2CA5328EE997A267446210E8A3264F8F59252EF834BD2C3A196D2496D68610DA30E5E83947F2B6839FF482600A611D4E01446D9B77D0690E3EC1A818CBAC6C2D288CE8F602A0C23EEF079BA2DE579B303CFE652B9BF6223759405841F56E919A98B77390961EFC49D007C7BF7C0E4CEF267A9C23F95B1020EAB983> |-/r <1C60D8A8C9B734785558627110F19B508E58E1B995A265A242C4EE3A668EEC0F48D2E24D2D54CC435A884A96BB4393724BCB068E85DB816CB933B65A0A90FA724C27ADA5522934C03952492C0E064592D7CF39984383DEB392BCEB2A412C8DDF864E72C1290E72E5712582A6B5AAA888A2A4CF964F617E54EC85CED7695C296C006EA960D29B6ED43FD9DF7A84EAE9355923AEA6F0F0CD9F046F455888B9AA330E15DFFEAC6B5F548DB602D0E9EA53E9835C93A213E12A38A2828889D3AC0B07616ED72FA38A7883C3C0> |-/s <1C60D8A8C9B731073B7BAD667CEE9C95CB2F4E335BB0E0723C14055D9D17FDC9C0E8BAC8C24C77043E5E9DE7F7D6DE928C9DA20A852A8D5FFDF7EEF3F415C16084C70B8F0479472E8BF71BB52082F41658DBD67556F1CC22FDC2EBE319645B8D00FC93FEB244A8B126FE8220EA377EA5921E1C1C609A0F5374E45B6A1C5CABD10E3159259102020F657193A71E316CD61088DEF40B9311842E612378DCDDCD3EE77CDD7AE98A5E7F548B0BDA4A9B30A69DC9AEC9FF23B48425101D5BCE266C68A2C9743DDB5425D24AF5F8AAB09ABA8D53F7F5AC6589D7854B7F45962AB1A2BC23C7EE004E136DF1F86C14E3300B2C00D4FEB121D106C57B9E66D4D60DD113737DDCC660F958E07BE7E444E97BCEC59C64BE2564A0439C7976A6D658ACAA86C7B04B978B6CA5402031D76DB367CB8FF45F3248317BB8730E8CBA539D8B80653CAC2CB323ECA0> |-/t <1C60D8A8C9B737EC2F254FD7CF15EE8A1009636A021325F8A119DA33F91D3F1688D6C5E89AB6DC5A903F6A78C9C5F04B19E203D789777C97D060E338D24D05671E51052BB2814CBA68D056CF4E6D812DF3D2BBAF9665C26B47160123788197991C6C816D5956D36BFAF485B902C8951657456AF422AE9574F1A008> |-/u <1C60D8A8C9B790A8592ACD272536288025A659C9ABDDAAC556461119F3C85EF0AD8C2A925195B182BAEF7C4BBC8A328D04263D0C7EB21917977688BFEFEF59A9FE3D3E5E1CF2E1C646579F8A315FCCDD25663CAF8A16CEC7466CA9B14D9F7787776816E0C0EC8FF9BB4E1174CF46AD79B2E0FE70FA9812CBE6E13486F2A51F4C4478F9B07E325B5016FCADAA4F97C493DAD2452C9F6407D0CA79723354A467C52FC880A5D5AAFA387DA6AF12> |-/w <1C60D8A8C9B6079F44822BA723B9D20B15EDE917A588FFA8DAD7AB4D6391D7C7516C9E854DA4F55E6B144FDE6CBB9CE39FEA844B8F4E73F02366E4530D16BB0F2718C5DF24ED373F13CDE78AD4DA5D1BC5E3BEBCCAC864717FFDB1B6E8A351A79D234987BA641E7E679AE364A45DAC4E51D8161D2EBA49497401B16F4B33F73FC5AB0F74C5CCCEC9DFAE642D58071A53F08AF74B319D66CBD3CA31DA3BC903F2F8608048689B6879D5B2DF03DC08FF9D509D94A0F50158F0064DB241E93DA59DF08A06AD035BEB969DD593C1F0ED357577A6E3B1DD8445EC5B3EBB6A65825DDA> |-/x <1C60D8A8C9B78C66FE9377F6053A6002C0C7C155BA44A4C40696ACB7ED7072DBA15E5B0FB061700A4935DC1966949C532CA682E75C4C03E09A89E3518345E91B909471D9539597F0450A760D670083437DC634C14314ADDA25F0813E1A1CD3F8ECDA0B32DA48329C0B2AD0FD20014CE2C99230BCBC9F97B7C5F632442BE27E426E90695107DA0D1714670A88B4E3AFD93695C2BA9122D71B74A33AB606D4805C89DA24C3B7E23B1491EDFFD2FCBED4CE85AF4E7DAAFC35A2EEA05EC9C6DC1EC1AD8189AE294CC3A67E3969394EE86F36F4F10FE731203E0F9F1509EE55B5D56061ED> |-/y <1C60D8A8C9B78C66AD37116C21C95667B0E9A3E7661E8B1B33D2E4131C8203C2BEC7E1553D5096FC606031FF1A6CC5B80078EC71E8C4BD1D40F887A623980B752B4C3D7FB8068D46BD8C2670958C33D3A3998A5C456DE3B47AA269E70CF477BC71F9AA92D905C6D02A43A7DD185D52779B1DD29F20B512FAA8307A52E197EDC9904817697873C7CF7FC6ECC1B408220376DE93370B5B6A31DC240B37D5D415AAA29B0714A1E49AF41980E1F2EF8051F8A2E8801A5039AFB67B6C80E8D4720D1050E73AB3800959F253E13E0D3EAD63> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/SJROJD+CMUSerif-Roman /CMUSerif-Roman findfont ct_VMDictPut/SJROJD+CMUSerif-Roman*1 [32{/.notdef}rp /space 11{/.notdef}rp /comma 18{/.notdef}rp /question 9{/.notdef}rp /I 23{/.notdef}rp /a 2{/.notdef}rp /d /e /f /g /h /i /.notdef /k /l /m /n /o /p /.notdef /r /s /t /u /.notdef /w /x /y 134{/.notdef}rp]SJROJD+CMUSerif-Roman nfSJROJD+CMUSerif-Roman*1 [28 0 0 -28 0 0 ]msf23.9448 31.1719 mo(Is th)sh80.812 31.1719 mo(e galaxy simp)sh248.81 31.1719 mo(ly smooth)sh369.405 31.1719 mo( an)sh408.268 31.1719 mo(d rounded, with no sign of a disk?)[15.54 9.32373 10.9478 14 15.54 15.54 15.54 12.4316 15.54 7.75586 9.32373 20.2153 7.75586 10.8633 15.54 9.32422 15.54 14 9.32422 11.0322 7.75586 14 15.54 9.32422 14 8.54004 9.32422 14 9.32422 15.54 7.75586 11.0322 14.7559 0 ]xsh851.197 164.135 mo
851.197 168.689 851.774 172.381 840.15 172.381 cv
78.2437 172.381 li
66.6196 172.381 67.1968 168.689 67.1968 164.135 cv
67.1968 135.273 li
67.1968 130.719 66.6196 127.027 78.2437 127.027 cv
840.15 127.027 li
851.774 127.027 851.197 130.719 851.197 135.273 cv
851.197 164.135 li
cp
.193668 .150057 .155337 0 cmyk
f
851.197 164.135 mo
851.197 168.689 851.774 172.381 840.15 172.381 cv
78.2437 172.381 li
66.6196 172.381 67.1968 168.689 67.1968 164.135 cv
67.1968 135.273 li
67.1968 130.719 66.6196 127.027 78.2437 127.027 cv
840.15 127.027 li
851.774 127.027 851.197 130.719 851.197 135.273 cv
851.197 164.135 li
cp
0 0 0 1 cmyk
@
.75021 .679683 .670222 .90164 cmyk
%ADOBeginSubsetFont: CMUSerif-Roman AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.systemdict beginSJROJD+CMUSerif-Roman dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/D <1C60D8A8C9B6EEDBB3D5EF77D94772AF3AE26BEC227D9CE1B4FB6794B859E7F10DE1BD7F4C923A8F2574049590423E8036CB1BBDA473A356FAC5EFD2B026229F615AE89EE23D5E0C902C34F4DBBD92ED338FE31148610339D1D6BD889B393E1D925D70C5A68130840D6D8B84E084646FFBF56AF88334B933477ACBAE3300631F278E34EB8862EEA8114196757D51BAB5C0512E4D455247DBC855F8FF> |-/c <1C60D8A8C9B77FE2CE93E394FB4C3267E9B5B57E3F625F6E757DE28E6E7865C5C75720EB74F015F60144BB4D0E8E432BFB9B722EFE2679ADDD6F6A953175F4B8D50EB69C120A850DD5E690A511117097B24D96B3B2071B51A0C870F1AE27105474DDEB470678A84348CF709E9385AD7B01B1E2E28631FDECD79F8BB819DF941FF02DFF2075892C2099DA66CC51F3C052982B6B0A047C0C8BAEC920436DBFF424568900FA13E5C2AC48DE7544CD0F8AACC8381FA62E2F7BB2260F7DF2F24AE88D233CDED6E7673A9C6F1D7363C1996E7A> |-/v <1C60D8A8C9B78C66CC33CF8A64A4EE37962B713ECC0F8BD59CCC83F8D8B6B9173E20F5856845AC000053B951839E02C078E5F8468A6235AFE60CB1BB6474A620014D5C7B4123ED0F8C8224AB1C9E6225D0209F7B1CC5283314E91684070BDD5B1AD906B40DC0662826063F69126FD3B15323162288F75FFD672CDA3090160DBD47E0B64314B5AD6E21A17A38E329B2518AF75BE3DF29734F406E4D7C0ABA> |-systemdict /gcheck known {setglobal} if end {end} ifendSJROJD+CMUSerif-Roman /Encoding getdup 68 /D putdup 99 /c putdup 118 /v putpop%ADOEndSubsetFont
/SJROJD+CMUSerif-Roman*1 [32{/.notdef}rp /space 11{/.notdef}rp /comma 18{/.notdef}rp /question 4{/.notdef}rp /D 4{/.notdef}rp /I 23{/.notdef}rp /a /.notdef /c /d /e /f /g /h /i /.notdef /k /l /m /n /o /p /.notdef /r /s /t /u /v /w /x /y 134{/.notdef}rp]SJROJD+CMUSerif-Roman nfSJROJD+CMUSerif-Roman*1 [28 0 0 -28 0 0 ]msf142.158 158.527 mo(Does th)sh236.712 158.527 mo(e galaxy h)sh362.599 158.527 mo(ave a mostly clu)sh563.216 158.527 mo(mpy appearance?)[23.3237 15.5396 14.7559 9.32373 14.0005 15.54 15.54 12.4316 14 10.9473 14 15.54 12.4316 12.4316 0 ]xsh457.562 329.119 mo
372.522 329.119 li
372.522 289.433 li
457.562 289.433 li
457.562 329.119 li
cp
.347509 .27863 .283879 0 cmyk
f
457.562 329.119 mo
372.522 329.119 li
372.522 289.433 li
457.562 289.433 li
457.562 329.119 li
cp
0 0 0 1 cmyk
@
SJROJC+CMUSerif-RomanSlanted*1 [24 0 0 -24 0 0 ]msf396.289 315.525 mo(Y)sh412.104 315.525 mo(es)[10.6558 0 ]xsh803.541 329.119 mo
718.501 329.119 li
718.501 289.433 li
803.541 289.433 li
803.541 329.119 li
cp
.347509 .27863 .283879 0 cmyk
f
803.54 329.119 mo
718.5 329.119 li
718.5 289.433 li
803.54 289.433 li
803.54 329.119 li
cp
0 0 0 1 cmyk
@
SJROJC+CMUSerif-RomanSlanted*1 [24 0 0 -24 0 0 ]msf746.325 315.525 mo(No)[15.8159 0 ]xsh851.197 281.187 mo
851.197 285.741 849.823 289.433 841.96 289.433 cv
330.121 289.433 li
322.258 289.433 320.884 285.741 320.884 281.187 cv
320.884 252.326 li
320.884 247.771 322.258 244.079 330.121 244.079 cv
841.96 244.079 li
849.823 244.079 851.197 247.771 851.197 252.326 cv
851.197 281.187 li
cp
.347509 .27863 .283879 0 cmyk
f
851.197 281.187 mo
851.197 285.741 849.823 289.433 841.96 289.433 cv
330.121 289.433 li
322.258 289.433 320.884 285.741 320.884 281.187 cv
320.884 252.326 li
320.884 247.771 322.258 244.079 330.121 244.079 cv
841.96 244.079 li
849.823 244.079 851.197 247.771 851.197 252.326 cv
851.197 281.187 li
cp
0 0 0 1 cmyk
@
.75021 .679683 .670222 .90164 cmyk
%ADOBeginSubsetFont: CMUSerif-Roman AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.systemdict beginSJROJD+CMUSerif-Roman dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/hyphen <1C60D8A8C9B81F2C3A13169CC22828A24ACD15C340F9> |-/C <1C60D8A8C9B6079F629906CC4403C7AE344DE36125F370EE30BBB2759AB4D7E58311B882F012F34655FDC34590EF07BB2CD8ABF23AA4C62AB2F9453295FFE19BE96801D6CD6DD361ECEF75ADE6E8C1E25F4227D84523D14245CF742306A6473ABE52422677BCB8E7D947D380DB842610D2721C777BC351815698B6032E540669EDC4D366310C7DB277719E4C7F40B7CE974A75A9B5275DABCC082CD3463CE0CB9E542507AA15C844CBFA70EE0EE03332A5B7579BACDD811C733513EC279CF28DCCCD5059DFAE0DB5C423CBA99751D62226834E57AA0AC74CA120F0CB2BCF879E09BB3CD2DCF58280FA02917DCD9215BC724FFD02408C0C25D684912CEBF500A2D5EB906A5F3A20> |-/b <1C60D8A8C9B790A85F500F40D0A89094C9CBDA8C8B55B3EEA3E20F6EBF6899302CE1522552992D12E02490D610BE34BCFE890B43C716F56A2D65911EE82E254EAD5FD20912DC48B5443740193D55799CAE822D8CF8611EE50C9BD61146427943313487A23214A1A8C866AFF82FBA98BCC18C655D4C053C31BB0BD1BF163082370B157E84D0267096E501F7EB00B9B78F308BFF64F9FFB86D> |-systemdict /gcheck known {setglobal} if end {end} ifendSJROJD+CMUSerif-Roman /Encoding getdup 45 /hyphen putdup 67 /C putdup 98 /b putpop%ADOEndSubsetFont
/SJROJD+CMUSerif-Roman*1 [32{/.notdef}rp /space 11{/.notdef}rp /comma /hyphen 17{/.notdef}rp /question 3{/.notdef}rp /C /D 4{/.notdef}rp /I 23{/.notdef}rp /a /b /c /d /e /f /g /h /i /.notdef /k /l /m /n /o /p /.notdef /r /s /t /u /v /w /x /y 134{/.notdef}rp]SJROJD+CMUSerif-Roman nfSJROJD+CMUSerif-Roman*1 [28 0 0 -28 0 0 ]msf358.615 276.527 mo(Could this be a disk viewed edge-on?)[20.2158 14 15.54 7.75586 15.54 9.32373 10.8638 15.54 7.75586 11.0317 9.32373 15.54 12.4316 9.32373 14 9.32373 15.54 7.75586 11.0317 14.7559 9.32373 14.7559 7.75586 12.4316 20.2158 12.4316 15.54 9.32373 12.4316 15.5396 14 12.4316 9.32422 14 15.54 0 ]xsh.076661 .055573 .058839 0 cmyk
%ADOBeginSubsetFont: CMUSerif-RomanSlanted AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.systemdict beginSJROJC+CMUSerif-RomanSlanted dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/B <1C60D8A8C9B639EE89A1765FF3CC778F245C0E1CDC3CC8A84FB04B388B383707ED6ECF5B0BCD6ED8DE042B767C6E24E7B652C63DC40F90BE11AE0924467FA61A98063000CF405AC527E57C289D0E705E912E4CC4D06B116C555B75F074B2AAF01E0927E351365919FED6549AD1C594AED0C569E7D3B360AC8B4FB7686774E733834B586F867092C0AAD939F2318370D25C68A7B4AA6A585CAEDDC5CF9C094582091E54BDB13FC230284D6226AE8D4FDDEE9F4121C7D688B134F06DA67ABA36B5F1FA59C4C8E4ECE486DD1B35134E5FADE130FA909787FDCBA72BD2F0F7ECBA6BC5A41B1943CDC85E429822E534ABDE632D8E862D69F9C5C81B9B0C5B93EA1C0320263283D4EBF3A6F52FFD4D59086366665BF05AD22248> |-systemdict /gcheck known {setglobal} if end {end} ifendSJROJC+CMUSerif-RomanSlanted /Encoding getdup 66 /B putpop%ADOEndSubsetFont
/SJROJC+CMUSerif-RomanSlanted*1 [32{/.notdef}rp /space 32{/.notdef}rp /A /B /.notdef /D /.notdef /F 7{/.notdef}rp /N 3{/.notdef}rp /R /S 5{/.notdef}rp /Y 7{/.notdef}rp /a /.notdef /c /d /e /f /.notdef /h /i /.notdef /k /.notdef /m /n /o 2{/.notdef}rp /r /s /t /u 138{/.notdef}rp]SJROJC+CMUSerif-RomanSlanted nfSJROJC+CMUSerif-RomanSlanted*1 [24 0 0 -24 0 0 ]msf717.284 473.365 mo(No Bar)[15.8159 9.81592 5.80811 14.8076 9.81592 0 ]xsh311.716 474.365 mo(Bar)[14.8076 9.81592 0 ]xsh851.197 432.367 mo
851.197 440.632 843.661 447.333 834.365 447.333 cv
241.029 447.333 li
231.733 447.333 224.197 440.632 224.197 432.367 cv
224.197 379.988 li
224.197 371.723 231.733 365.022 241.029 365.022 cv
834.365 365.022 li
843.661 365.022 851.197 371.723 851.197 379.988 cv
851.197 432.367 li
cp
.553674 .468574 .463813 .119448 cmyk
f
851.197 432.367 mo
851.197 440.632 843.661 447.333 834.365 447.333 cv
241.029 447.333 li
231.733 447.333 224.197 440.632 224.197 432.367 cv
224.197 379.988 li
224.197 371.723 231.733 365.022 241.029 365.022 cv
834.365 365.022 li
843.661 365.022 851.197 371.723 851.197 379.988 cv
851.197 432.367 li
cp
0 0 0 1 cmyk
@
0 0 0 0 cmyk
SJROJD+CMUSerif-Roman*1 [28 0 0 -28 0 0 ]msf301.955 397.629 mo(Is th)sh358.822 397.629 mo(ere a sign)sh475.608 397.629 mo( of)sh507.471 397.629 mo( a b)sh555.659 397.629 mo(ar f)sh598.47 397.629 mo(eatu)sh651.305 397.629 mo(re th)sh710.412 397.629 mo(rough)[10.9473 14 15.54 14 0 ]xsh388.88 431.229 mo(the centre of the galaxy?)[10.8638 15.54 12.4316 9.32373 12.4316 12.4316 15.5396 10.8638 10.9478 12.4316 9.32373 14 8.53955 9.32373 10.8638 15.54 12.4316 9.32373 14 14 7.75586 14 14.7559 14.7559 0 ]xsh3 lw
719.289 85.0142 mo
719.289 127.027 li
0 0 0 1 cmyk
@
761.02 212.066 mo
761.02 244.079 li
@
760.233 329.119 mo
761.02 365.022 li
@
1.5 lw
133.83 85.0142 mo
133.83 92.9033 98.9448 99.2871 55.8335 99.2871 cv
@
430.698 85.0142 mo
430.698 111.021 263.034 111.021 55.8335 111.021 cv
@
228.954 212.066 mo
228.954 226.44 189.126 233.072 139.908 233.072 cv
@
414.252 329.119 mo
414.252 355.125 383.547 349.125 231.908 349.125 cv
@
3 lw
8.82471 99.2871 mo
10.3247 99.2871 li
@
[2.93392 2.93392 ] 0 dsh
13.2588 99.2871 mo
52.8667 99.2871 li
@
[] 0 dsh
54.3335 99.2871 mo
55.8335 99.2871 li
@
8.82471 111.021 mo
10.3247 111.021 li
@
[2.93392 2.93392 ] 0 dsh
13.2588 111.021 mo
52.8667 111.021 li
@
[] 0 dsh
54.3335 111.021 mo
55.8335 111.021 li
@
94.8315 233.072 mo
96.3315 233.072 li
@
[2.93392 2.93392 ] 0 dsh
99.2656 233.072 mo
138.874 233.072 li
@
[] 0 dsh
140.34 233.072 mo
141.84 233.072 li
@
186.832 349.125 mo
188.332 349.125 li
@
[2.93392 2.93392 ] 0 dsh
191.266 349.125 mo
230.874 349.125 li
@
[] 0 dsh
232.34 349.125 mo
233.84 349.125 li
@
[3 3 ] 0 dsh
752.516 487.019 mo
752.516 524.517 li
@
328.72 487.02 mo
328.72 524.518 li
@
[] 0 dsh
41.3452 45.3296 mo
238.47 45.3296 li
.0523384 .0376288 .0376288 0 cmyk
@
294.088 45.3296 mo
567.308 45.3296 li
@
612.306 45.3296 mo
819.295 45.3296 li
@
187.221 172.381 mo
272.26 172.381 li
.193668 .150057 .155337 0 cmyk
@
719.289 172.381 mo
804.328 172.381 li
@
4 lw
372.522 289.433 mo
457.562 289.433 li
.347509 .27863 .283879 0 cmyk
@
718.501 289.433 mo
803.54 289.433 li
@
3 lw
277.697 447.333 mo
379.744 447.333 li
.553674 .468574 .463813 .119448 cmyk
@
701.493 447.333 mo
803.54 447.333 li
@
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
/SJROJD+CMUSerif-Roman*1 uf/SJROJD+CMUSerif-Roman uf/CMUSerif-Roman uf/SJROJC+CMUSerif-RomanSlanted*1 uf/SJROJC+CMUSerif-RomanSlanted uf/CMUSerif-RomanSlanted ufAdobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 16.0%%AI8_CreatorVersion: 16.0.4%%For: (Brooke Simmons) ()%%Title: (candels_classification_tree_barpart.eps)%%CreationDate: 7/2/14 9:44%%Canvassize: 16383%AI9_DataStream%Gb!R&M-;AjZN,;YJ9Lu."ds[E<^]DS;/r0rL/q.u)qb0skNQn7l1@@S@9E7gkH=c#KMFRn<%9c%.e3CoUY2m+)h&Pms(8qV1!P&D%8_tC^$!pq/-Tup.X`l'cbdFr/T1PoRC6VN479#n?-Fe:)?:mVL.6`C@/<;iuJM`lTjAAF99M2)Z8=jA*V*D)UpT4%E8m:(AWS\fr%a'7o>3^:2WWh\MeWh/$Q960JGE]"cBL8[4FH?@t]%B!**pZD-b4RVs>m_UOiNYBZPY:imGnt7j/",V'fO;FA)=g-^GT+0M;SFn3b%4?OCKGW</G1_'Wl^;Ju1o6>eW>YENp_A7`ag@1HS*`)GgaEi-n^VKH+o\#^-jjpdt)SQE@QK?M=d#rl*JEg)\RP^e.@%#&;L)4a'%_78Bk8pGNB*1@3f.RTi>mn-;25\1Eo+Y(L\8T.3h9dN4bkGWDV_8j7%aRf0=Gt4>nl(=R>T<,LK[CVMp0NO:5f=h2M.,a-*N[(0l%jD*84jP+)RAc]B*+XfDkFesQ</#_o<q^maUr#`+jOpX-"q,<_+&fgRWJ>B8*9d-/YWOMjt5Z7^bE&!Z52krIib=FCJBK.Uk]j*C^%9W#HbT1F6k#rK@Q#*MTRObtVn?Mc"m6Y"IWKoo!$\SRql]o[T5]j[4&-+uVl:8[t\mWGp?8#n"354D+;C#/e,qEO4")Z=b-%2Bj+%C+Gk>W/$;&>n[2s?\e];XWBeLRXKhlD]3brLra42DG=@!.@3L8CXTuSih*2,nb>-::DDbDR=rm[#!P[+qG\0fY:)`:-pjm]P1"([%hBm.eP>DW10F=@J/")&oa^heOgWX3$:*p'c1?]gmS]O.!9Eo7J2u&&0V%V9-Q/Knb#tdf9W)KfbBsjC'_V<TjPZOpH*R\HG?d^"t%Od*_PZs4;.Ie\S"0IHRJ=th9a;Gm]DJkr<I,D&].2oPoF(WHTMn-_\gT?n4e'58=R"J7Acp^9l+9E:8aPJDrW0J<-R3n5]BU[nRN%-TEGT,ZoXong557krn8mko50`4f<?hCQO$B$cWFDck;a4129]VAdnZ*/JoS#@=f6b/rU<)i>7H5bWgK<T#26:KN^&npa!1:W.a)o%^^#[[#,(.DId!;arXl5!/V5p=(G^$ZHg!KS(P,4_VXm5kd!njs7Rnm@7L*jq;3Olp++-C,6JjI\JeR]-HpShjS]=MTS$!c`3<Fb.%2l0qT/!Sb\kCc_=/^SW+kEOnqoT!=M^a45XT$nRN@j?DW=qj#3S\.b@aZn3pZ8)_DP;t##+Y?[`5=3-=C+&Ipr,f>].uWCYUO>Jb%PjUF*K=<]VU+9N=AVt&9*hZ";POQ#8%GFn;?OE.,9A\`T%f_0rKIcW95=$D<g0aC]KGaX9rfVaPIj.1MBRe.=</UV)rfVcq2#3\;%;qPgG?_K_W[(k[/Yt0=ZJ&sp9^K`*][(k[/V*]WHJ&soMrC?WCbT2(oGpU5i0Cfp=:Pb@sM/#%N/Yl>,<4Rnc_Dh6_rmuWIs20?U%(M:Zh@TCV>IjF.<C<XRN[q6*(%@1;G.6R/[<JKtm1)G_\#pCH+GeasM77bgPJ@/>oQ)4!u%o:<Z\8>RJc4am$'n,P5e0bgK>>U?X%U<FpV2XUmTbQ(FRC2F5*dW5`t8t^+L!-s@F+DHc+9'pmBH;;WAPJAMn8-gn9nsj.kQ):6l+bcLqfE,,ST#26>5'i7Si6R#O<-tMA%6<GI.@ANC_Pf!GS0)RgAOPlJV#,qX-.4d4f\==eO!!B$hoF2WfWfJ;hJ)P6m%h!.0E4n(G]ga/Up2O4MhPRu=?ODInefTK6oNiG^%66MDgV!!8(m4!=EoU3FOnZ;?cC.#2b7ImmKJo:cA`Ji6g1`\Zs0u4W>';!"oZr]L%nY0%pNN#PH5\@L*XFGqi.PP@cd`B!rW=FDU%b`d)<(QY^kCVdO&as$EYlZB8U2[E](l\DVMo!ZDlFK<CU5?S_sf@p,k*I:KX9m^)%[78`T2Cbh9n2=R7kr:<=-lC>0[<o'X;"Y-K%6(t+7ju;p^&T!pLf>"7q11RaHd`sH.@8f:^^I]feXSkr!B#Sgg)ihSe?'a.7F4*:qf9Z;@O[Nc`5^jBh5WH\XaI:JSMu6I:dE$"I%.6We7.C`$5pXAYcW;fT&/AP<?8Q&,J2unYh8rA:';[K5b"/9kl_[>MfYguVY,,TXJ8u\g7LN&ZC&=)p]NE_qo;G4,BP1<4$"T0UC%7(Ub<9qEe36mRrD3'1YF@X]:En&*lc-VBH@l6,+6cet.O-JV!R1B\4f)Gh;Fn4r`jIM6ca_TsW;-_hqMK=@gb+l&6$;$9*NGeIE=%&rB,M&tXuP<O>mOF/O$u74P)_Uj^+0WDnNGL(Yup#^98%U""fW:TC.::Vq<BIgG5[2tGS5^6DWuPS(JL]Gs-*.RA3:gmjUElc1\p%C($7ViYDk*h9"<5!`46Oba4P/TY,o]Q8\5r169K"-WSGk(5`5*6@lSb'0`:5jK_f^rsl03N"/)&\2r0Md.7TMR8=iKY/hbc!p*mK%[RN^r,6==80JFfjbi&L<r[OsZJN*4N!VUPP3l)"ajRad%V\j1QN74LFAb"")^DR2j$0<hD4>/16$^f5)2os^I11-/s=Ef`@2(;:$%1L@9#fA]cP'+GQ;7X;j$[**62"C7pok+UuXGbh@Z^am0Fm5a,;L`>?fe"2b1AE=Ig;,)*<b"(]7_I`A.*S/Qc<7dr3?dZ;]]p%_+%0IFYDa]$(.W1M&KM9`*baRm*=7q59rGZ&Y>377F6m\e<06+:To(9,lFB2rX`hPN=uBqKih4huGAI>6oWiO`($-b-+T3]uBpRRXL2%Tr!WX5qkj:lnlNorM9*\1oShLPse+/:t$caqPp+oM'bs)>eOID]rflo28,2GA#cHlgXJ'%8st@4oalYkCKdl\jUbR1m#UgH4`']q%[(fT.RS0W?D#^)*HPEo:qpmeiq4GkJjXPXLj6^h`a6,mNM\A,qP**hj\>\T\MZ08`Xb*KD_m6/aW3V)nM,V#4OeH]_i/3CtUU+]o%YULB]2S'BE8t"-2Knt#Si@37ZD8M/H_g(4QEf@E:)FB0Lc$5MTErkTrn0Gh!Or!'on^NdI75MGQ:eHWa-F=@1d*mZ(,U,d)eY67@%s)l"l:KLYEF&m'H:MYmgF^$0;J'G4>9$qsbk:,PuOgiT1[_dPP<h-[Ph>c]RV"&<M=0hDd9&Q`Ws.fFpZLZFi9)qU/Ul/*"#a)Cs%90pqi'2D5?6Y$KU:XW7Fe'E"ek4(qbJF"Cs;_(+s4'Fk)$mOT-FJAaN.KufidNf`rXI<d[H>PJUJ2N><C\Z@g?Pu@3PG-KE7<Acd%8I@nMc\h?p]O]#g=,G4e+PIM,V>\qlEE#<RpoYZrFH'-;CKt/qQ'.A(Q-oe3$^i#%/OW+X3&N:cpn-$U'`8MJOff7%>]#JR[A7O2%8m`#?(j!uu<_d@)^G\mrMZ#f3'>G`gM$g@V>L@blkq;7W.tf)pClPHRIF2G<oW6U4pdoDN84nab81MC7ap\l1Nkh^ZZ#8,s'R6K9%eml20\MeUoNf5jTEQ(jU(?7g^`&#oSJgV[^5b`gWe+E^o,Wr&iUm;0DH',L0W7\QAp9J4ss-J4>P9oi#;gfg_kV*(ApfdkG:Seb>%/n+RJ^2;rCcG,q-G5n1pKQ:TdkGS0>`_5sP5c[9IRf6#uD,UCpY-s3HqA3OTI#:gtERaX6HlkX]Z^qWn?/h-DqOlsm,ca<^<VDY*%/Po4aop72!61L0OfrFF:C$f[58Fm!_?':5q4C`I9?t1TC<0cl.l+B`%Z4BAn7")UF-BR'rX,$ZX4.Q/g2"*2=*CAp-::)bAE<*G-%eiU#&AB(_8dS)+DG6N0F]Lqg=<6:E2>74Ot:MTL]7bL7WU!g`Fg>2a+YD&6rV#>5`Jj!r92\dF4\j@3?hpgOC5@_\jQ:`&AKfYDH%3o<?SUYK63%YOC2Kt@(:*>b8.`CnNmei]XRNNRh1Q+]7bM7NnTj;D[$Ki7=;V`[8[qWSKVdDj]jV0Q(K*Fub15WiSam\2ZSGToKk%VpkH]-Nk[OEW2S6d&*^'$\aeZ7Ti(?KUm"HP@JcS08=g$f[OQ,?RLZp3)\n7jg+i-[UP5XPhm*2>$#75V<gT-X$e-C.A?-.)6&<n%)qnP3E^<K.Ucfs1BIc>$$)mNkV_'^V-JfZrU10O(]YR^>[KdF7s#,:W[BurReX.e::aGFp1O%28C0e!U9j6'$0m_`bFf@:VW*J#,%&_1.qZ0M+;lK@lKP^TaBZ@hDF%(d(69"pQ[!sfs>csYCY4R.tk8X]DqQX!24g">o_&Mp]Lfk;j0HGe(CjNSr[T5s6>$,U"YKl0\L%;9:(aOAU#!e<.>UI_QVuZoYOm'K_r\qHYOn6*#9?\*=na;Pf(OMmYT/\MG1PoVI%I/ZfM.^P*Wqd)IC0VC*^Q=!c\'P58pS1uBO#%HFc.#[E]=Bmtm#ph%?VJda]A;F[r5X1K&?bWm7uOT%H`=gMM@f8oh"k3[dS)%`3F+16poaN+*uR+Ds6kT(W!/1cB6nJ:[5l%)"B/%%D2!k_NKkqcr"T7=D'Ji,POC:VQm,Ul:MVD*[?)0_*s-SBik.e'e6JH8\[.Ynu.VhrRk`.)pYf_o^<l9(`U]CO$.RWkhhNXrK'iS%]qGSd#H^R1eqY?S645qXT`<<5#n4+$qTgiBrS-SG#5B^CY$S$V7k^fZIIp$CEp(()3C?^s%7\g\oJ+mF&PPaoIW#W>T8Ztp.97RT%;,E'Cq,<-0J4>9!e>8Nh^je$],8B0-kmu2hrhVb*&%fN)H9`T&dSu`$Wo$#$(7ERm9HN/aig$83)ume"H"%jY1gl#"&EMI\_&7BH%5k&#ol`Ap2888D"%od]J24@5NM0NJ5*Jmg=h[>)m.Ve,r"?"6\q6?MrO4?kCUs]FGFJ3K2Nr+FX\0X"Mp!)9TU+X[>AC?D#hBimj%BQ[jYG?H-?=rk6uaH@l#g(X@P%6n(fCs[+FVJ%!1L=/l!dmEMKDCRXD5B5,aREPk5epEDa8L=RP;jCd("K=(XDpt(F@a6iVNgVB8%9_D!>_9EX-*:ZDM[.d%]8N2.=dZQajEa!97?0;!['Z@'l@Hcf/TB$aLj5j3K$r*Jg4)=N:O(>=Nr'60bqFARE@,c,/`7^t&O<XVl%n7`q'"QE8,?E;uNI=/u[\-FuP-8q/[h,t!QY9%Fu$ChqjT?bA-#1@/-lesXV(h-RNg:_k\'l/fV$i_]iaJ<<WWBY6F"[9(?0uP"0%7iHhK?6RT[jZZjic0ITHp8Hl-OhZX5-O@kaBF5Z6Os!!,F$>>AFL0AeTqWcW1`IMI5=V50Tf[!^hE/Z#&[2!PKYr`A2u4-Y#&n_s%66).P_b]o/XV5RE`^.Z-Wr857GtB0*'E=kXh;9hX+!Z'(]hY/"LAsgCd9,#%q?/BsmsRhM]/SP2K[Q$sppo+!]n[kVUP1Cu[B2T%%BN1-B@ussqd*A$Z3)n6>0`Yr_^V%NL@bVR(D=Z0.EUq>e^$?0ho>od_4I^_DDapM9g8qPMD-_FGT0iMV*AAE,L#L"4+D;gZ;S`d@%+A`$h5s_pG+eZ^Pc)m=98GBn,>H_N?^nP(f7*68g/Bmm8PCZ2!\gIqpbalIir<K<Z"6R_u,4,@b3LaUH=QfNFX_Ht!hJ:;*,F9BO%+%uYI1gNNHf<a=5dL\5RN$3PuHi;J596_<&Y:?]#XYuOH_5:l5ObbgF?hf<`.=llgkoV/N4gEHZ;GlrpD\f$_3'pOZ4)YQRDqG`8%mL>7OU8=CS_F*o/IloP\P4Lm85sJ,kQZ)N[5@0rQSp?r83H#]sI^m60+-?1cq!alqMo=NYqJ-,cRn>_/O7F/CR=k]45/D5q'`O7,%7J,]FFXcG#,r(u`E0*^AUs_gHrhdYV.e=I'P]l:'QOlOsOMm!TUl`uPq-.,s-TPJ)$<ZT@)DOk]eQs>N!d^d:L"c0^$KPn4pF)n<%$%$o8m&i;3[JRJMq%g,q6N+5U$cU\mf?q>cO+&AJpB=gK^Q=]s;2aNW[XVKO+)_o(I5JX#3ljWUH5=^3Y,5S,21)/PS5\_[&Ch'u%^"O/c7@4.8Gd#.,d'Xg7lNA-A0q,U;n[d*GLV0Qc^I-^H&(WeE=%%ER.[H4)=Qk4OdlhX-Vf5n*OCcl;R.\Su'?#9&K*aAU.fCO@%E$$cZ!,&aUFU;3hL_m@ifqB-GrrVfZKG]^Zpi[i]rfMpOh(D/DJC(0PH'Obo88Z<M4Utu?g>/2%)8hFc4</2XgAA;\n\cpW8faE5%n&c_s2kH:,-BgQr.S+(anX"?$r2VqQE9S%qlN2/WRE?f(,5qYsR?0>Qn]CR`l^5a9KDu-^T$c$<X?V,EL@<:;XEqe=oEHfo8>FS^%'3?3PdHX@qGJh+-ZorS&>!S],T"0J+)BDVKVuiZ0/YYP];0.&rc&Da*=@Q<N3Dr7e?YJU%;')Ke9FktY=8GOMc62QEArQ^Ydg<d2%9Z5r"R.SD$U__sUitgU;rhdh'#Hc)YH)(e0a`oX"eS68PSNKLNMG3;qHVs>^TfhRuqD*>J,Z!CO>F8,ThQ%F%K7!VCR9E!li4WDW%N1](-o.uh0]q7]$GGs5bN8TL)D]>&_G(,f.B=q`MT?H(_D_UKe1/Z)I]*U>+qeM6rEnB&sP=.sPTIWP)24TV0Z8CqG6%/$@;/:7Z%#pCpsD;4UgW+Rp;Wo3+[1=h^:AaY^P>u'&(jE2J^XfC];CL+=MHr<AFPh)Y;=DA<FBhba14Rn1%CWOplP5gZW2q#H>Co+Pn]manr%LK"aGT1RkqCuEhRBE8Td47%)Z?,X=il)M+ddQZONnLE^nTF&X]VI&2,8e2OSV0j-,R=oB[8ro>nFO8)J,%l/\@Q#5OU3(j>dZ)OV%"GaKD_4s"dadi)mm4]`/fSK#lLh8PP3N9(76<q?bemZarSlMOaKP+1=p2F%s7p*-/%VVj@46R2PE<NZlpY)r&m7FB%b:SFEr8f9V%d(ZY`kH!5'b*$IfBIS=&e[Z!&%k#VO>4Q27OW1,QIFWgNl>"2^-T:XP.bQ76R2CDO+2q!eLRB^>J/j51Zm*WWF2sBVp6peZfeF\)%c*#7dnb&$#!Y4EX2Hk/re%ao+H,n;gc"jM:Ub)u5]?]L;V1kN>LO#jdec.B>_sf^na`KB7mrG_K7u,bh$g\_WJJ%3U--*d7/l5pS%(Nnj>&$'gCnXoj#deLSi$mtpZkPmRr:+,gMMW5@Lf<uXaIsTr8(X!4;(&tls(g1h*"<?Rf19)u6@VT#"7;MmHa/'\pFouK?VF^('%V2m&cd?8'SoC)U$#H=7_lS<he13&iap2JM[?<p%lLLi;lr`@0jbkS>21V"ah;hY2:$31];s6VEIUhQlfoV#:^O]eq2S('UA6;G,7%MB`5@L=;"fZIC(&O7P-[[!YiUF?D!#Sgq^5Wu70OJ`iaO-OS^0;Fj4)!bKZ:;/\FJOTk7=_Kltc]2S,l`r4J\Z^.]f7fsHaQ_4"G%l'tLjaYaE,j9Zg5Cg<#<r0>dH)-mj$\1<QdU^&-_V#k4$o\='OW+P0=Ggk0kraVH:#A`F'X1*hU1Pdf%N5j?pbB(6RoNim_]>u2r%i%R!+]@Cg/3u391r@;CC&KL`oa^agd:RkeUoQt(dB*:-.^Kq1&*`9$lQ/^bMl85-lc1>`Eb(7LACCPWS0/RUWR\Gt<GG0k<S>cgN%<C:R.ACu8SWQYF'gl07a(-!7GU08T+*Fd(Ros?TASDU@?7jE<Lf5tffGhA;\XnLh49E35>>YCX8:iV&^1'rnCOe5j+[_jXfrI3kc%WQHL7aV=%L?\-M0iY:E2<h<g''t-]bl<@"b3\I_t;/=:48Br/G:a``iq\&7cr$,VOZGNH2\^o$oefYHF1p#q`=4+H3FAKAWODq4$%6;h1.TQNEQiJWbXM58Y.mjH[La/tB5#6>bd%a4<u](?X"9U^1(=B+CVO;.K"6d6k3p5dCYoGnYi3R2?\X'KkMWV&-?8>khNMQ?#(%Rs)`MT&(He@Nm\XVDWTXr1AiNf0so>C%\<V(Ha6).Q8)ifQS;Fo1-t)Ba@X3bf+F5(Jn"HFef)7+h:Um828Z'V[ZmXNee?Dr'dFk%7kUUbKbFdOW]I]snB!'pNU)hET>GSjf'cPf6A\i3V2B_7G"EP;LhitsCJE3ga,jnR>b:.9(Rpld&Xn/F`q4EH'lLf_##K#29G_\Y%lB""Ka**qM[m)<d$cc"hP/clPfHl<$]`RQdWLMRe"UMS=!mRX=BKfLDc"F3EKsLZ$D7?EVW-+kQ&uN%<?W)SoHH&KbJ[]=@kR:HE%9F@:OQ?[>EEQsLjW9f*`dNTX)86o:j)66o8MUZ(PQ-u8;[[Zds8")@&m1$>/$S&i#Z!?Fj;aYOu1XKXhUNUa<oQV8<o;5:-<<Kb5%Ic%]ejJOqSUETURq1uR"UeSrE$+_KGfBeImI9"GsbSsXGqD9s9JJ$:21cMWOPlQV()7:X]gT.R_=#Q_0Z?#.[%#e^k)XPAPSkc0]%BU?)^4%p7KJdZftWNR2l/FSP0"'"%t13[KgAT"%)6)ed)c1uT8/(O![6QH?A,1mI1;5BkqT$I5&b1P:n4&bs^?*,.n<^e/:P-*kg%UmT/Y9\d1UXFX.nCjSb='(;cNF$sf"!Hl*C5Mi])7'Gr>$.-gkcUd4"F\GoDYG=[W6W55#`pM-?WS6.'j'"G9b*c[[V+L,sfU@l;%Z!@9F`EVQU,-Ep%kk-6VHEBcN2]]9FbRDZK*V6&ob>DB&c8C\HNM_.3_0HN#JXWSABu=Lqe.ZFs>OFtC[0@GGBt1ONpjluAf1>l_%L"pN[N>2tg'.mUjT2A,<;sO:Uo/g+,RXi+JgN'FjO7O29ST2F9a.=fD3h;tt*Fc0-mIg.GM)OB]o@.]<h=7/fF6NMrF79j.L7m9^%nQi(NU%.'DP`)RU5-6CFQ?Nn^:O?#_.7JrD-+AN,LrG!iA`Q;2*CjU\*F))UNErQ7.b$i6hPH[B$Sur.$Ls8GQ99/S7r8Bb#O958%6fk:b88`Qm1+$^>)d`nbliogg[2TNsFks9*73BE][+fe:H)/_frYQ*8p`3>'bh@/%MH4dT5m.'UE_pLJNHPhS4bnlc7#03'9A>l=%W<<R?%*&Z6;@V,Cib%E0<hG/u>,i+XHN#;>aVS3W-okZA.S3S.U^p>[<('isAuq9'iq*21UBV7DaB8O4[:Ir).uPWmX_N<RCYI9:%UnALYC,MVe4VCo`>SDrO8!":,gG7EP2AJaBNWWA!'daDHN[o3aN[D+8k=)R9Wu8ubR^gNH>jGlXlo7fJWM:=!PYt`h"+I.**7E=<%CKhP*E\e.c".d";\;afb^%YDDRJe]sB&Y+UI=KXh$$uU`>`>uidcPX$T9TnCl@=/V3X'B36as?^K0Ki8Z**)"qW2<'',Au*=h)QR%^$WVNX7b!pRA6JGfgI<N3^rgXBhB3*M`P?Omo)ek]8Va+^J_fiaWD.tBSb7fY,*@&MZ[_30bPa^h^N*.]Mo,c%4'089/thEr/qX)%EQfs@MS-n.90m=+24;lEf]07D208c\YL.i7]roAdCoRqKo@YnNXad-&A2j8&IApWJHd):@[%&^XOqEY7,Tjk$BUL4Pch1)L5>o!D%*?V0mAI6p+Zl1tr]Ve*l]69-kL!Cm9r7=o$DaJjO1+T@.Qg-M7YUAROVT&*rk3/_OH'N015Ie`9[8[FnY**/+5ihm_\%At$p%Ws/%:A!<X(91B,?fFk0iNM]c?g-FGl3m=^8b+H2&0&@1oD'.<b<6&L7hWO6n1m0>->09Hje$esir)+nVT!ZJ.62Y,O1\OaWI'cni_kgZ%QZKR3<0H?q;E+2r*?4E0eI/Y)I8RR*F=p21]f^e2/oPoGQ#`kto#gD:Z6KO1\A^3oO5E(DTNKD5,-d[h(rj9CGlEpnj6NCjpQ)7+%1s95&_IjBj?\CKS?t]RqTm?R5_&7unCDXkJo97)@biBmPgV8eM7o/ZeMZ!%`Q(P(;2q;.Vf0Mbs%@r::n[m"Q:mU.UnD2j(09V?k%@1obP<,$SXnV*Ig"Id)t^+VGtp?#s=*km5E#R]k>9*#R`+B.%k2@X?ZHeg+Y3sQ^9;jD$4P!0NLS$b3Io;KuX[i`e8)"i_:mnN62%Q[\dqMoDk%LlqeIY1`H0s$8c[$j=q84N><n2Dk6;[!NW)lfhR9i5iC09`tY=+'i._Xak`q!;9-9D15c#Yk(,$mtorX0kUgb/c!o#%"'XIG[pr2N.&&Hf=SI6iPKg_[L,I?$gs/3ooR(*O1pkkkmoohcp^u0>k2tLKH,:K9n]*#[>"i7)!o9f(VmhE??Gd*u=8h@40Mp[]%k-66l[tXTe`=?RJ4$&NHX[cRn]bO-uD*UpFU]En\aK4e<ZH?8g4$0<B($3'[(C#a&Z<]2Jd^/jT^;K.DcHg5&2*R#V7Qb:e$IEe[%`"m%WSD2f*"58mpden_(."Xe$Sl^(oJ!72p/"i*NENs6`[$DM_r0'"bGjmGpf=sHR5%ZP#NG9tP$^@]`?5@C.-9(m[F<YW)MRb%$%eL"?<h:u*74ke%qf;5ZT9;"eAkr[X^DF]*%0.b'RfZMB5eZ`^FJs2bCn-":0c2k%)#BZf>`b(n:j7?=Uk[PlgJRU%M=At&ioZ8"b%r2Icf#F?lTTZ8"XFT&J.[KLp(QYL26)Sp/R:SY\bYRStB&9hF[SQQ%X(#S<,C>Pih7C#enHZRt([KUu*QFqLP"'XjT\@7DSd!B6O%j1jh:GP<Z/HM<_pfE/_o8BnC[cnk)ROtUQ8ol;.*Xb?*QdrNPCkYq9=bnfO;`_F-["7uc"W./ZtLTJOBIbXbAqTm'F5i:E>R^PIO%;EjTL!<jpL#CFJ(=6a@4T[d7qj'd7ZC^!e(cQendd'acJ/K+a<ZWe"Jf[e(7a=(c.nk:TS!&QeCoHG+HIB,IM,+psL/8;Dba05X;%-aS`n`<b&pn\"CCJI9@drn,<aYIMaNo+:t^bjjT^o*CU<V5XbLR[6Y.4%d<N"-p(kB]<g*)cF2/\<SY:)HiaJb,*FV!GH9jB[XYX%H`Ya/ckE%lDZ]5<MAKV,d-P>n1t(hiY4=r1k&9R.,C5IZnbk>^if1"P2bHR,6C8716?_"i.S$>AD4fH$N3,b56*t;8&s?P"N/6Go%7l\7P3RTN0q\KuF3[^5cEa8Q>'QE<L<-cW-orEIF.lC2p;h:un:Qos?Qaej/IG1j2_Hh8DYH1=sA+?HDG?t'5g:[A(k-"/2I<MGa%mcO!i?rrfTDLK8s"_2W8q`[cHq,1'f3mXd?gtf(c7nV%L/<7*F]?a#S.lCc%\^'#LAI<U!T6'bK9$+6C_*)Y4?EHgS`h'rUf8$80%S$ua&h!=])fWI'K^"r+5G,9t!1YKuKN6RVHANm\PR]n5X"o-<RE+W&&hW0ULDcL##[BKDTbDd1)[lYi6r(#u(P]h]Wj7hfH*QA_1%_je@<l'(ep_PH/F$(d[I;ImlPC<"\R03UG"+Ji\q-VXEOrV4LDK!BUH(jlYW$_Nc/V6?Tk]tou:ZkV3,;Ck#Md140ImS0W>R[d;>%q&hWiCW76d>,c1NR`TTApE.DP4/M4:54s_kbOSSC5Dl%PeP\-U.@#dqdh$imHE=dQmdH@ELkK!4YX8YbiXVu61*G`)mC<1tn]f]h%HFSTDaG1WkFqAHffN2q@bucXN%\iX*;*i2s[UG?rnqOB4CIG,3F)e'eep=!GY?h1BDe';6rqKk)'O.aHlpeBuPS&57>kOt=B`f%u%`YZ=pQ6"=r$rj!4_cSjX+rMEJme6@O##q1)6PC35BL6Y8iN'[_JKFJ=:m`&Ni/N89XRYU.%B)C9kG,IN0t#[77CFJI**tJ4YCKWn%qJ6NRTm%X3!l^IX#q4BE'sM(-FR=TNp-@*iQOidT5p+LrI5?I@,AGj4]pp=Dc"pJ_O2!,cT!ar6l^E/o/]M/_[e2b36d9"ke0OrY%W$dQG,/_:"cB+U2o3>1,^NEPpqB',u'XK"F0^-JC5((P/eW4@VWNUQ&`qn6X*Z@?Y=#tik6">6ESHDUcqG>M*&9pUb-OE$5J-ip@%lg5%0$[!:tYT0^R$AE\e=.%jlD$0alp+%5e#G&:tAma_t6e.gPI-#KkUgnAT/g"'jb")5C7'K%#I`d\Y&KhE3&HqB2?c.7Gp*H"&%n:=+ccQ-elZKdTV`MQ;e$MO+d589m*Q"ppUI:eCZ%H[@P)'?</l1e5L9Ld\(kt/g>I/)aEAc@dOIAY72GY"oJYW:I7SL528ebDW!%,eM9ma6u'AH_CV*2;]+,7;4<sckmG$+$GWYGc197_N`#fn/IF+.u3+)qo9[1mma0j.gJ`.4`1F6)-KaW1rjn`_dg&[oDmD20/smc%(rh]@!O]f^JKDsXhLjRM0!0-f(nNe_#'4tcU#6Em>V0#gjlOd#`OP;:,r'`tL6h!ul\8DR*$!_[,+B!sk+kIgqd:E!+"Mg>3@l70%#4A8?-DRjnp9tAV9n)LF&%pG/1!\>%-m:uo3^5[]-8]mWa]p;Kjk)nUYsD#]VL32$0o)8U]o=JJUJ`kPDCc`B:McLeZgZV8ES^0F%\TQL>I\"OG@9n(WE'YN!XukQE4%Rsb$`cB][k4NP>bUGbWpi&"T"7WEHmkPH>O<l&nS(+In74mriF5(:PeLcR)hMp,\W9Y\fk-<^%QWX2QgsW-T3DE*CGA^$%d]t[,`A=[\Q<)4"X,][B0X4O^(c95?SJ4.@o2W,)Egg>;(;!(aCMTh[csSHt-RS6F-f]88<j!IY>uL$;%gJ/'oVp("*XAjQ,hBgPFIPRD$S^QR'g\h"d=j8&9q(\ApFIkeSr#&KqLAB;<IP\8hWR\Xe%l"&+qj-[$e!MIY9MH\%]Qdp.422;A%_jH?g[i!+KZ@So2@Ec[;(<)[#f:m_]l+sRFE#"6@Dmi=Fl';]ja.G54;pZY[FaU7pq_L*!"kupR5Qgl9=OX:O_%+WP,)1-bQGu+(%imut#I<"W;HUE(3Wkg<=SS",:<,`\4)cL/0#cCfsY#^Ht7pNP(m>-C4$!e.1bpWCKTLH'N]JJ2p#ZUNL>&$eC-4\H6;2JrB2T2)R%RZe[(O;c"@?..N]W&NVSL^UR>cEudi!&1o?FLZ[g$lPQR)Y5WfZ7/WR\5O`n_p'72n'Z=,`SP6=!65I%!.>9t4GeG-ZSMTZnTk&L%lSPuT$IX'=@&GHPo#4;12S+9":nI6i`UE(YirdKAEX';2(Sm6hN\$csQX?N,[fWiTjgs`h?pg7O'"9.kKdRh+G]\Ck%o/'Vgr;mk%nLj&h,iVjJ@q.r7_ViArlOpU=W'u]'4FareiWrAoN5/k<Q4b)S^U*LX`;JH9R;S)3hSEVNK#Fe80?5arO0aK!"@9R;XZR`Q@#\',%EPG;@5FEDb\JZt?<l?7!o/mri2*0$4iomYP@Kcs3K2IoZB,acDPubQK@fFs)i(S5oV8oK74u;5FEQ;AaQFHO0fo&-hO5d-A&6`"c%?5'af)A[rUY*]''0$$<@*krAbO&+$[D[AJN?M_G>YEsX[%EKW(o(>!uJ5\#f<abu1mN]Z;7%GW5giZc8N`"0V;DOFg]7V5Emc_)g%dC0a7(9hn(lRY6>Fn]kB]K]gn&ZQ>9c1t4H?mY9-EM5Zsi,*UD0+@h\e<j)<?&C#IU>]2D`KPRuGmagWp$(L;G-+qFGk*'GKGO$9%+VKsH'4/k\,$HKd]95nZ)&nJhBbtSI'uAh@^A2`c]#0'b(H9)FC2?miUY1pZZ_OC/E/+<4T.MP)gHpj5?M*"-:)j_2/r?6XUZ"$\%Xi';rZ%Y0k/Ls?_p`4PJOBT19Ne[.4:h+:p5se:KEO5m,-1FQcCKUJ<&T>dL(0^U4fEWcBF)<;Ag)I8Y*SOq1+7?h!RA'rq>;'?Y%:l\G9[4YjWY`PsjNBL@SXi$O&QD+M..8'gqSm?D6(OB]>aqouH.\VH("t!m3bY3Ae%sP'jjI2Q9RB6#Z5(clHN>\H4XIA^i"q)D6%Nj1ITMCM?%f<@!2Bo."P/%1>Ka1k_<N$/b0<qLhXdZ1(oc.X+8i/ttgYEMRrDN)u*j^F=,Xc9*;=W4_,l3oSqVJ[L/<Z9gJY2@P=%.<lQYVVf/dg<)`,NNl$lQX=D(hMORWRDO2Lq$e+3M[R:<D4I^sMP53\V2pfS6g^rp6%iJ$Qt#%0gYn]7TuYJ1%FKhtS,srUA0J?e%c-e9b#gZ)[Ck-(@XCU:[VM)PO4CsDfd_[\S8"U7[VO^,'cO>\b[NOs\hiOhq]XBt]XDZP?Egj.r=.q'!X_n>haTdn<(gG(k6o0,O%U1JZ+pJ2kP**q/IOa/u`0CG(<Mh47F1l3NPq!]-:@`\Vh*':F4OnNH$9;^?=-$INfEp^`jY:j*=ZjrA@-oG4<.7INY,PGeTBT,Ni%fEKbDRnBj,6R!3d2msT9;CD5+U(C`cR=]>`=kMHLm>3i,b)R[u\hrRcekn3?nf$h\`>>&$;f,^$ZSDXDA<r-,O8l/.f4s:iAu_9$%_mepU6)1`1%\7YF*Bq)F%68O;o@=e$'P"3+coGac.;*k+S3pouP\/9V(>ijeFNtbG9"*[#3HWOaFK5;F@Lc\b0nW6G(0iSLc5+)Q%K?cYbE3UBDkB`6-]8djlk6sDp9Wf[^ka^\,Fo.FSjj9CsP"kN$jG/"51BkDSoK)k3TO3lsA+,Ym9.oa58CsPTI4cC97MjNonZ-m^%n[WJcJ)0X*BA5=f/7Zfp]0*0>1:ik>nYBU8E_j>1-g9_[M`)"kQW"M<"R?p&r6*R<aI+kJQ6WaShd#:`lhHE&-0Q$fEOp<b^Qi:g%I;WJh]6UP!f*b7"S=A5K+BR<2gUG=ghEq_nlMAKLQsIlN$t:pr'o'C^&#7nSXg5IO8fJ\n's5-]Cp"EBTHq/&KRt$c+l/@<Q4!jN%jWp-nhJfI(kkse'E<l`Q2FAH4R3=r@_58r?@)8jZ$R:iJiU/7/@h3Ebk2mgqbnEELC:XOEH<?A)X,_P[/rm7u:G6r9"ZA;rNT87H%2?Z`59VOU*s8<NPVR!Kg5uQ1]`C24Yn)e0,"+r_MWLG6E5T\h;bZRUlP/la_HgU*h<q]g^bXjL7H_2Il:tI"K)#0">;hClN*hQXF%r$$E6p7'/3Xj;8'VPS1PhO$rfNN"B"6r<3h@d=mWGcl(2/uJh'1.]UEMe+X*'(*FN`l(j]WB#EaDFk>*1k[o<f%dQDQuq""pA$a]%$u(XU/gJRd>E1UL^FrW/B/k-Yo<-mEZNcgHlS8+1H2G"OgJ%t+\ko)WD,sTmNl+O$-Ci9<.-aL\iP[`RcJrQ+ACJh[K>h=6&HO=u%p=kRCpcOp'RrBDqFL\3fmQ,8o.3&Nr'PAGJ>:=uo/=X";T]F5XF91.J2UeR5T)q5Iaj0-@McnE,!bpM<4^O1r#BraDmhYcP+tF_n%M.O6_p0SfflkXX1==DlkK0<Pj]sD*YS14?WX])T"$[H:B,PB85MbYio:\.jIT;f+YT%rpD*BId(aQ041Nsqg00mI5N1hPo;*1X+s%On&4cX__CgfhuD2cqeI@1+(l^K1BNmZA&W/1phL8jYSfX7qSalP].Pp+s%WfN)W>8>9Z>b4ADhG`nh*DKG__i*%aq-/j0GJa!s5b%U#[2aV`-N;/<<T_nkba=j\o:YX%)O=Z^3;,>97CW7EjYd(fEjU>rlSSI**!^lTV\KBkW72$T8>T?2WJ3X"tnBYKf=RJN^23A$Qk_%6a>h)0ul''>=k`O.3pgNUB]L=I'UF!e2=e^'W?e3jGnL-'g2r9`@/%ZQ+?"o0qR"+@Qp<%08X;ZXZIVBBc:2(+3l#rFcH39CPYeu%aG49I86nA#:7!QRP0L:C5+FL>>^&B%QBem\WlANDE6dX.X=GBQcAOD%c@15/bD0#hQnmZehUX]u)m(9i*lOPkR'#udCY]UA@q$Mg%0p/C`@3*b[]7k$t*@jWK'iGQD4GFR)0=[R<O0ud*(l`1?4E:+=QH?BjB6)hR/ORGOO,KMs>1-.G[Q[E$nVChRL`buP'6,KTV6O5=%!S]AWA2t@T_iW(&EbYr63`#K$:h03GTaQT%n'"pm95*@^`<.'\ZuJVS>l?KegkrBC=0Z(O44_SoTsHh"40'BEJQorI[N<s?GH#G)%R%jON'FoS+(uJRt&NmBUW:f>jZ"0Z=2QdnF(Ynf<rVA9In(3tiHG?&1e<f(#A>Jc8OYp[FU/oj.OUCKW,9mrW=ZmuEZIb&tU!_k@%cfI&:&A(;.9gM6lfc9-cfTbQc@8ge2CUljfXsk)\Q!uQfm]WG'X`,'J!i^,[GJeh<WGjnW-.cX.>,B(rfp+ISCPc"MO5I3@CJ':*%<g#'Q:'\`q'ol-GCerD[lrheH-c/71P;,>>\21F8?JU[K=_-Bo;/\(qD!]c!qhI$UY_;cFVp7fGZ0F$(k(C`lp6$9<Z,J/.%-OZ/%NX</87P@2?%U1oN#m\s+39f0/FgG$UWi!!:n];gfnC37UEr5aa<_C'g]abj72gr<9Hb;":^:K(-`38,$nJgBR9d'i#)GmWuMju[=%>jUDsV$NjOkXXOhg=Eam;_f]3"WW]])DP!J@mdQVA7o\R^HC&6@@-`r[(!2eD">l'02BW,D\63Hpekrr,c!.6bAakV3SEfE.G;t4%YQ@EQm,2&aFfa_A/;LmEIG_(m!ncVnPsJ>(-+h!)dl'H)?b;*f]48GUYXaHW4+uNfrN)HOh-Omj)0Z"OfNm5ABZi-JmYK'?!gP.*%-_%P0I4q)3>MK&MHsrqRnW((QZO4l5K#-Jc1_XfY[Ao"-ZE`Q2VSppB`^S1n:f!Z?J,G%BH=><EW[N!*UUS,AP;m\?WUq@CG%[eB%1t]hA^`4\>p89sjCq/81AP@/Jk0bp%8j](0r+58[A!cQNBX*N,>3R@o/+(sJoS+*!Ou#e&EfZah9mM\Bg=]RZk/uXh1tN[:$up]U%pV*bYM4E:aq$OYmD4Hk$gb0VoNK;"-fQPCp4IiNH/GG+5+C4AtI9cQ!l\557a'Y4FV"].pNEY4#ZKZ1L'@rUHB;KGY^Z@M_l)Yk2%<hA0uZK\H2l0M3;>W/(s.KIC67WF,u3l?K4>WT@#DALQq>MO#-9K&FD-*K%mc75.jHPP,#9kQ<c.Yh/22P$,hCmi,Q;E!?Y^WrAC%?C/m5Zc]+caVe5*Rr2!3dG9nr^2,j2fq#JD=3d\l,E$<aG5!:7T1u4\M;Fl;mVFqbq9reDes/sBPtPb`.BSt3B@W5m-KNmdko=kk%f9f9FPtSS!`a"^K(;\X4flSh`>>mGN<A#;X@Va5cZW^GAS+>-p9kPQE[a&\MX'@]D32I@rl)\p?/?IG<Zg"Q3l)aTA<m.AHRNZaR%p$14P<k3;^G,6cOR+$!?G2Ci49kT_aa)VBHh=^kkM9Q#Wa2&Z=.^P>LjIJQh<Q1>$UU.7h^5q*QWFS_NU>1>t]3+"*3\,o>7Cu[g%^,i=a$2o:"Y1a$uSh+cf293Ngip"WdHlGVlp)F^TpWhnJg4d.Lf(k`td]uN+=3qjAL#"et:hjgnQGYtclpE3;_isnt:,WDf["uZ&%bYQGr&Y5:b(Ra0aA93ATH-MldA(DIP/YS=HYIS/UB4Stsm[S\Ab!gNT3+MG8GH8b3ZWqRl&>'AfF=U[=#9:bVU,ti_fV^1Ogb`FQ%VQfDEGH.`d]')m`WcGi9Nq$@6,T/LA-&0l+k#mX=(Wn;G*_!\Wk3V3P\NHclFP=_aYU@jR6lrqY>/Ql6S,nPS38($USJEh_:M5oW%b@II.]BNRf[8RX)iJpljS^\!4A>XaKJ7^4qm]j@3'm0lj3cN?5'>'Qe:.H=a]D.-6US4p;^TM5uSGg3;AGEQL+Ol"2O/q%jWS76Z%SQ0`GE@VeKcc@\@gMpDJm.Vd.l(Ubt'[g";\Ku$#mC*ds9<A)X>kaC`]me=q9CdsQJ]+a1BpX[El.e_))aO&:]H/ii.-h=6`sCtB%&_T`4`_bQPeoEZ68W+Nj.5U(/SMqDBY4Dk8gXQf?^c1@XkjM/T5)'hKA=/GCKQ^DQga0)(IS'TSLJ`mUp5=>\%O"1I`2Y<],dO:&%YU)%eN_PF.dDshF%..rB>:dO0fc0?qEo5GjDmaW'h29oGisg2`R?+E+E2VKU\,%k%]]!bUS+;lOV<;a=F,Sgpbn&2ZV&kcZGfgn6%@]fM:GEu)bN;4,?^T?Bg:4*I!G:k?/XD/6eI:KQ&=V>NG%Ehu((VK&OiEKd4]jSp/>XMuf]ucbOABYd+LY]>Goo8!T<_og1G<$IW%_>O#;K;sncMG)ag2'6'*WD^5!RD9mD!m@es0:Bah.E*?Ee!QFl@bSr3I3.Q^+k?o<B^Eo+6X=o93K)jV)Z*rFQ*u-7,K:_*pBBp+%VMkt/B"QKGTk4C(L*S*n8i&gQ'C(g7rU$I!!Zs5!L@)Ml=8Zk<`R&^*??^!?[>SAc=GlBG_;*>WU,fCD$,_c4NJ2GsECGkhE&<jE%S?)?o?.V6*U+$>+/XGF#Ht]h@:#U*;EID(Sa49,W,3Ta$4U+Zu6!M#-M6il[cO`I<bX$Y$bJJ?o8^]]B4@3rC%=B/l6Cm<HV"L!l%DI6AEB=?<hgGX1Lq::chnCgrbVg,tX?_>>bfJ\D!`o``%NG[Et3-k3=N>O6ej$e1h_Pd?lEt3E[`?1^G5frAn$!Z<"/PrVHEIMa4%FIPL/G3ja&4as;UfS\9ATZ5Kgal\q#QOfFc*W0dae<,@7g6gu8R>+3DS9)8]0#Q@RrZr/r[]ThORp?r(6c.eOFV;.gH5(hCdt#<h%2h9_H!i[ib/B=\&d/&bS:letTg`H6,a6Ga6NSG@_<Q\/-pmX#N_9u8+?s=050j=0c2Aj$6R,%UfX#sXsek:B>FGGMp=o4:+o279A%S^\kt(sIi^l:eX!8#i62Utsgc#"EH0[i\!uk];%>YXuH2bSiQC)]+^7LW&-Q3m`-mD_Yb8ji]Lme)P)nl9_gX[60M*<R]L_0]eQe%X#)r,!iqh8+eA.6&R&bX+m>)S[VKYb/Xhse&u2u;4kW;=/K!4Ej)^2OT-'\jAH=5t:2sHqF@hg)],K*8U9n%SbFZVRoV=G;Z*EF)%67e/7I&j?fa'>%I1M$k7lsk:_i7qeQq[%E;c8cTY`Ve8+R*$=jGoe2r!B#f2a!saY[7pQSa9#Ulb8PC$NLgglDTS+HaE0tPMAAif%=^fVmF#0UAb#pYR1hI.7iQZ^2OEL<`^0Ak!@9V4SfuS#M@hiX\iL\!=`nB&U]0aRoqtV$kH-#&Fq+6WA!<a_SU\4#Nm+H7LH5k$F%&]Rd8[ubjDW)[s^q'YQMcG9Qr;/MpsGr+>bC%TF!B=HQdF24T2)`mY')m$g,[<afUeA1NS8EI4lo0teTOu\e+2C7WB&;+6m2`0Z/%VQfe&:'bjRFF/SYCajfNN4J*A/:t,QcQ'40R-Pd5m#B\)mUjNSVN"aDLK7Q.X>teP^Unr.T*<<)",Ll\>ri@T2$]6<q3T>->gAtS%BGM_+%\WJ(lo%QhIA<AL%CJkFi7naoj8eHh<L1]-AAtGr/!nB[ABb.^Z]WqH!8YmsqqX3o/AR0JlVTZJb")&cs6c_2es,Nk[C,cU%C6k1)g+VQ/oYN=0%_H)jk@)BZ.[T_j[(a;".A*XWDCq4G3Tc:%m8?-+;pG?ZV0k2aNB?&iZ<b/!Uc7^S6S3_i+2cc.CUi!Bq,Y8L%cA&X>f5L2cTpE7@DglBr>Q'kH;jt>Mce0gZGCS_Kp\NQSh2/2)%<]N+0]eU-\Xm%3,q!]oHi;GQ/8t1`N32,H^NJ<bk'jM+Zd6IP%agLcSIcd=Ac26VjYFNAZD[F2?')27Ie#31G5Ngc=f^JK;3^Rt_Hi9IQolGtDA%pR@3FbOTj;%.VF3>D(cb4eo=_VYDGIP*4cd'k_%E8Z`7?GGTsTGP/jchUVV2;Q<^lSeY+\^uo<5/*<Moi#)"][^q<a(i_CrLCd\bkEG8H`s'JV.Lfb^"C#INp.uObVpEMh!7I,Bm6W8%r(c6lp\N:U4mQ>N/H%8_!S>osqCRhp[`#k.G,\k3Rr6>mYMU8L5/Y'_c>%lQ+5c@/&,*L//Uef!1.M[Rh8d!NhLkW)5P#rRZM42u%mTleRS/t^:hW8'.]7H/7W(F8Eme()38mD7#5;dr6Eof:OYm'Rg>='99ia+hW6IXcU\+4rp9UBNMgrHnpaWATQHu$7Dce8>pb=l('%?GE=3e62QQ5A,W&I)=jJp\Ho-l=XP=/p4@iZ^ToWe%L45V`([=?9dUWr>*)-D`Maer-`snnmAG%rK`;NZFJN4,oIcQfGa2NF,nOC%mhf6u?9^rp<XJ6aY2N\O21<]s&lka[b4k`mS*bH,eo7gbZe;M60C-c+ZFSM()8">^?9`eKd`qs0be8JN\,*A$2U@[#CNlhO>HTC?%]me65Yp:N&om?Y-'4S*:Z,Q2)ZVQC2>Q%YdMG+>]Njnj:VSh'DlfYpk@!+NW1ACXiX\Zj:IP1/VbkLro;Zo*HQgq-kBl9OT5I2.9%MHlhK-/#nR5Ame^ZYL@?F,4A7#eW+O04mg]1sj_(jMO<JdjSqRhVdl1%J;,oN!+6j_@UQG/1DF4N@?M=V33AO>kJS:e,>I3T>&&U%Fq-FQ\-h:qeNu3SQL+4XKXQ<e#kIAqe\6FYgijpKGOQ!.>l/kLO.i'"c\SW$^11F04-J^*Vj@Ri3pP8+UWZ>aWumrm\bb7EPIp$O%?ek=BR,MqCH["94jQhH1j/.7mmO^BXmNZoVmO<N&jBgR[(Ymd"_["f+&uUQW^P`Uah"t74;O6E:9V/nUp>d)U]T[!QFC;D<g'38h%C'pB"4-<jYG#:?IHlV"V5(39N\,?hsXn5r7k\j]JSSWfSpbt)dZ1GbC^Z.P=B=9JIh[eiI?0+76H1pZqKu``TG<@/smB'3u\aa`F%;AVK3N%B711+tW!F>ADhd^h)0I#RBoJ0Z"UTtPo`BS3C&*2-m9bJ!AZ"_IKl&onh'4STKA(O$A"C@S[P<BiMlgsO+:@']ToCubH9%N).!nnDLbgb,*FV\QH9(K:KkQY&]kDibSP'fS("tXX<*!0jNE+*Z/SI<q)3LK@AnB*Y[">?Z?$-mYf#,mNCPum+X"fA%lpOn.;1^%pd1;dkE'k6%L%,bU`ai/iNn<.DteGhNO8AJ<jb,=(Z)S3!ku4an!<a^;Qghq@8tLh]t."ZP>eRhB5.#*HH_./57c,M]3fC*F0V?s%."57Qapb-e(Pp*#:LK"[_NVIuEGXj0>**"Aq6BN1JtF4JB/U<PT+U0t4g$Vm\A5K"q>&9SZ,A@u(l[aD_Wh$t/)gWZN7,t'<7'[W%MY&,QaG"^>XfYK](6g"HJP^a*c-q:)Qr\_oYKm8%\DVL+hU%M_qcrJ9\#V[@6TuuRFTjhI8&nJ[mI2_@AM54Vb%=IpSUAa[_%i#\%HMh7OeqY;'%^ia7=@kp,WaVj5MmR<"Lq*hr_DL8Koe^,J(MIP&(GYD1LU#c+5AtPJ]4>qkNFsthG5['b?5#7'rL<\R:`_q'U'!%A%=P",U:8,=qM,-<(b-BOsG4p!eF'IJ(`4o;EVTG2q&!qVB]_-.469R^3k0hLXS>1n/V&U70)a$]!B$s3"_]A!=I,%`)WC5cni$fu0%#bc:k5H>!'a2^NNhqV0:mBIC-;:*_s%9@';+p,gm,6Xp!kiZeV=T[sqNc3O1KBV&G:\<OHqb9&k*"-H2g+AG9lc*oHaqXk\iV"Ht%OJAEY1$Z0,rB,/ngDd?iVi;s9rBMO&T<>+CGk6d:C,>X4._MDPqN\>`%$I!qLrH`ghNQfJ+/Q/O'j5q'IX3fPF5%[6B72=_aag`/%iWQ(FF"TA!LoN^%$IMQ)3<"^u%%qMjSpou4](OK;_YOV!E;CTIlVCu9=5=<,m%s+o)e[^q1OfU%=)ki48T?+JT`ggbf4:h#pJ<B1%5&cu<5n4r\UF93NMgAF=bAQrMi<tHc?`Pso-kC:ME!<MeqZgKtr$e:Xcrh.A3*\gU21OZVqguN\JM/dkHi^sMYr]fgRBYIVJFM"0%9-Jg%T44T>k,D<or;s`\PS&r9J?2!MrG3[79Sp*a"2V4V^c+UfhZQ-Fj-u+).($Z4ll>k.n\g%e)90_l+T$6[37`GD7YtKQ(X@c>%g5J!pj[=TUVWQqSo69AqVV-`V>6H5u@lCB#Z?QBmr^o8")TKE/oLTnC.JUmn;KoOsqbNo$i37?a9=.L2:N=Nm/!)tFr[-%RHsWIt%o3HKd6'>nVL_"K*ndMZ`_n6\)(rSe(XnH&eD[`[o/Q1]($%:R9r0<)0?1+.Dfu0-%7-m3WXOHXVX_dDrh;pA*GS#9"^5K4S&0)J.%h;,a'pW>Y=aY9e2)5'DASOD8-HQn]H,GOZ[T%C5uX5r_Z!6>f:QF.I+H-p,72]Fb#nG,lnJqqH)fZ6'7^RjSN74<u[fD*W+LFbXJ%Fm@it[sR9ciq@g6YEokrk<Bj.1L/kGn):4lXA+R]Tm)\9rE\qaW9ea!Q5aW9Lkr\TjABjQWi!&,NAPbhla9r.^6YjYLpEWHm<j=C%^XqD#5:T\-q4liLj%qoVMdqKp.9Sr1mdZ`*l:cZ=K?YTZnSUc$?6tfVI!X(H_o4Cj:;cH*GL@mNq=_=&72-Ek7rS:q9Ls$C4+&D9%-mD$iFb7:ipHktUpiaT"C)9Sp_c7NAZgGr2-,(8ALkYCe>%g*@,m+<_j4Im#g=OK=`<INUC7;?&ndW*c!_1uqE$&`,K^FH@l.f#9%ccU2KD\GE]Y>jf:CtDI\a)<u3kMbGfXI#lO\C3"T+U$DT#^>s![8F#pe*e*ON;.ZP]oT,VC)9[Dl@ZL8d)LD6_9;3j@c,=crm%;h%]_aIB%2,cZ]4'EqcZJMhPXXrtCn0XKhXF.nXZ?uU7,'n^KhA/V8O(PB+:TY1BZYD7Cnt9dp%_`)b#a]b+"k7g`9m0F3d)oRk.e!Q%I^b%%dtH($E9n9BY$ESc>$mR%)Cs8iVI%ci8--t.7=;\">>"Vad*H\HTmA8mLOQXfobaUXT0`+6aq/kcF&`e[pU.R_r=5ELILc^U%nj+Fo&[BJ1mADkWK,F%%Z+.It+tct>'[Y?9Sm``4]MGAqZdjBKlsm^V>eUh9a$Bph;rH"=lGos>E3jlm5D/%\->Y\sKke^Ggb"8/%O`][/W;gh0)WcegUmI^K+7'p_G0&W$atYj-"d=b(rc#]U1ri>YUr0gngi9_^^%#+ZP8@TVB"59P\G4j_(N.CcXn'Noj9g63-GJ*&%1=u10bHdXbg77'\_aYjad.4Dcd5ZNUQ4o,L_Tgq]TR?[-4=OO]!ZQplq.`lOd/5B)-$IkX^AL>9BlhmG1M*gX(-9^r_nDD?AiY21%/sebB_mVI.UaJ57(g7WrSVt-X"=Zs@eB!>oI$>;A.PK=ZeUOeNk&7,PV-\:Kp@o0eFrl)C7lC+)):\^i/BGO\.qG4>!lM`'Ir(0)%ZXTohY-d%I9a7C4;#ZW_6M]N8Z$c6XTCZU9ZN,>:IN>(o5/jr1Hkbo.#1IX7;@3#f^'ZfCp[Xo?Oak_KI:&u2g/Yi7C@+D>:Yh!`%]Fkg@oSfrqh9Uq-eX<kd2PMorHlq-%G:VVBM.o%&M\"V'?YJZ#J[5uXa1p!J)$_c"`CKo02%(Ib3U[aGUD"U.I,WuQ4^k+ZbDe[C%TGP>5na.)+>QFBN!rdM*m)hjb4O?+PK!HBiKmiDO0YY.F(V=C\UY09bm&R?.2#FELb0T&92ti7mE:p`V@NU;jjY2u&?CA92%G#C3%M[UC6g>,e4o;5%<[Gm3l0577S[MgqUZNg,,0>6(Af:'ap10\C!l=aK>QK!hGE0(%&-nS(aYuQPUP*t4dAQP5NL[4J?;DT!?dZCTO%Cam=S<`WY5,)nVJCQ%]t0VjB]6Ye_!3NV*gb^ZLqYDok^TpA@nU6#7^nbmk,*<45^dPKi11#oGfpVlIp@;MAs/^tCs\b(2G^+NH>%)H>sS/+Qp<D==Gf4?2W`4hRF;cQ(C0@[$<up,s>lUmjGR?A,QAUE";WD2*!mbsRuUbgrs-ZPBH@r!<KY/%%j-5Q!+O$K^;6Dc/1]%q'+[XK%Z3OHZT`Ek?o-CK^sHpgSRiS6QVRd`Li^[90&HpR:'S-cb?G@i?,b!Q3=dC\lF2FI-g&FpOaeqr+4Gf!2rJGE7UV2_lTdr%1@TAH>duYL1:-[2(Yc8-^0._SFt'kMVI[g'<WEYWI-]-$S0<6FYS.f8YCG:>Y8q.Hceq`"N3h<iaqJ]OG8p>Z*RK@EeH^UaN4W%T%TMc6T6MoRWe;Ze3N;)8<Gfr+.,(?drN,eu_)is09n<c9gF=tn?ja8Ir;@&>$\alipFcV4"qt]3kc$6E9^U>fho))e)]\/iUb5'kN%=M;hS*rhCN@:]FrNGQFM=#*iOm$:qkX9'8aEcPq'8_)]7=Fk/UQ/5h`7I.ToK`e:R^QU=2P)YuVi/[(kL's,5_aqAB3FgQ;c2Xe"%#$KrtTAqM9cbQ:5mtGd=\pobTkZ@b&n)WX=fuWM9]sJ-#jNGF2F`A&7O^79nK@rTBp@qaP^<GR<%<d<a[H);oq:H$22E+l2)Ok)?%99'n]1%n1FEcF+gf\H%$EcEO*SIh.(3<^O#P7Sk"!P]\ie=m44]Q<X"\6BYpOdF3Jp]Tp@iB)aF-q'G-_p9gNOR/TP+khUecG)6K%reOV<nZU^%DPc.HH!.2?@X/L+ZGnr!rQGIj862upQa2b*i2<dt\B"()$XA`)6XiQPE()A^T#CrH[+es<VcWDLYuA;EM;.:cCYDOj%[9d-4M8/;-SMQn>rF8&29Dcbm@PAEH]q2#Qd*Ic-XfZ&DWK?m0VKJKFg3kF*gj[!m#oWZ#`.\HN<.i-o)prI;jR%Y9o;B?-/bE9)%%R+!S]A[\,SPXIgb<:iLpc0h\(0*)4!i;LW3QQ(a&budk,$b*J?[Mt=Bn#k[WJsBI?ukFSUhT'DodV]!mba+h@ZVEhpdVM-&e%Bq%]aX7uga`1;-_B`Ns4rOPPHB(#rnbTRC%qE&o#0"%R(k`QGhSF-bJ-"+GhU[]FoKt1j(VTGrnj2i4RKAjqc>/:b*R6G]V=$dY&WK\%.:=&C)(.><:Emd!\%!NJL>+qIL\crg/E:cUDbWiFdRGFXJ\ob2nal;th.`$>=uSa)i?n9if=E;h?c#ZM'46XQV:\)CL0Nq6Nn("%%8)&J*:(6;ji>^8rq\NELQh*qq$r,6[CKbHdi.Tm4L;UGe#N9_)%U_T@&?^`F)tmMc:LiZg%XksDr.0Al1)m_goZ=J9nG%2*qn@:1%h/ef3^&m](Wu!U$nKV#K7np6Opr5(PrUm0`n_2k>>cDKWY.;_l._/pbgN,M\i#F4/0?)j`Lu+S$oCu[f)rJ,L<T;1+6]aooq\'D!%TDLZI_PbagN/=Nl+6CL&@E**K.^[g<3.nlL%F_/#,h@9CLP0;CCf;TiGmt(!J(tu3!pYad"n>q7"`J]$#bRG#"k\8153\2[qP-O^%j===T6'$WKrjdabn[ZuD2&$>"PBKp!0a4Y!_;HgG&c`)4NV7o2<!Wilio@A%%PU[Z.)CFe_\jceR862%00X[<<pAPYJI[\Y)Bld2%Z3:]5jOhED:htZV!M&t!C>s-<:_WF04H</%6(JhC'g[k%=g/FV]d.V<`@Ad@GPKH8CRe\R3XhPO]M'ES;`29i-*"]*[K0M-$r&SH%L<cjSH#;TtKZDIi9qV\s`iF-I7am)`Yu3ub/`Su%QR8;oRZJl!e%*(Zf"TR#^@XKB2"@t);:,SsAuaI/fd90PG<CtP6.c*@'Cl?E%ic1VK_:?gP3sM8?7AZME?!k/-C[K88@uj>#&oel@A(u_'&<&V-+j$e4q;^'pV6M=Jr8S:qJJ`':Y)2+R`F6hOD.dD$@E^W3qk2B)%W>A@"Rr5/=-8/OEHolOZL>.pHD&l1c,r-ttg=#FVIIR$pHh"Kf;71m#-Ao$laA0(h*_mRiQ\fPs-$&m,[N+</PH,HA.cNrVOO8bZ%#G-/"#\2h*pAn`ul`_+E6-\Rr7*X_=!1PTLEur2okDQ.R:"W+Lp4YPi91[sb6W7Q'6ot9u;\5At7AudYP\XW:fT74*q]>HDDTRg8%dM[/f(r![L_)(nD2gG6R]*$^D\Q::GTdm`gB]U/je`#1;JeI@,=2*%tpDJX9Q_F?.\+=c"0]iei7@!0CKRF0l)%^1^n4.DS_@FS%%=Qd(E,*TS\lASO.3bX@NVQ^WVi5?*-,qln'S(?bRD^P[X_$mea4Z%0(D+)K89"[j%#DJ`cE"UV\9Q"q);W2eGDg8e4h/-SE$J*31%rH<Csr)A*W$"`+M/Kp`GIFWXrIB]Cg3?Ef<$/b7-alD>tXEX;U.TD's;5ijL=-5g&E84%F\7dk\jb?jB_sd%uE!9\f3\P4S=jV0l%:8'ZReC6U[KSC04c;E5Y?uA)2LupX1%L#DTdQ-A-)il[]+iW&'>mo;O,)!L/,.[kQG)a%G!dBgcpMmdDn1O,NBa529A!-Sama<dj%pBL)bn3/m"e+bW57J_VldfLKj']d0.MnDkMNkcfh[4oJfjgM\4?YMcl6L$:!)u=jc'gMDPP+!30a[@HU]ie(=S.B5J%@mBW-XK@[%#CMsMBg!D(1U19HT`j'962`7$AcVa/A=oAaJ56h?HOZg)i%oR$]M8Q#reS>16/#e4PM5O/roc:]9Qh(mo".D>-^%+GlKumT+FtLr%:$X;1%NHQ/2=,_opND(mi*`>o&ILGSaG_[=(]RIihL!P(q:j[G/XRk]6.dQ&$b%!ET[&-"B-qM-q(ui$@u:]M`tZ`*Y124KULq[h%.e:o=AuEf1_sbO\hA(-I\dt4NS+)GohgfXlNj'hB#9U8Hgb8_n7KpgfFH\s%hY4VYGZFb2@nf<N6YmZcKX[/>^UniM0YsT>pYF<a%=>+YrJu)W.4'R=>m\@=8"Rfr1VMe7]k:W'>m_A8*?TCUam^XeMB)mYS>b.JU*WODF_F/Ph2:4JG_gs`Id;$B2lTIF2`'X(-7<gn"%JM5q^%)Cqg\<!tu,bk7eY&8t(&uPa^d@SFGn_DMd8e1jQjARih1X.GI*Nq;dWK/MZGGS/4U#P-5\.1Z$!4,#W[sXLlo1BWf*Y:IM%5U\gN.TW2r+4KnAJAUJtR(^6VJSGB+=&_u^Z-CC>k]Ta&cU&Ku.a@a3)hcTJa;:X$q6jqt1VGRVH_9NT*O2f/kWXLg)%Ud9m=uoS%5^NOG()9Wp'*h\8VBTBS6VOImWU6Wofu6,rEWCc!(obQ7boOu)_V)>c_!q-*h5C1G.YJ4Gs*//e+!G0(+',9lOEn+lJVZ>G4!2G1%0'ofeFa$<&hSt.@m;W?.`>4&]i>`WO_YXe44Hp4@^2Arm/Ud5JPeu[qS,<1eYPiWrc^,c%C_rd0OG9"^[s@E?8/fr=*A+gul*WoI%"6qUnSHfMVRn%B387HomB0ULH-AMl`?C[(LDaO9HGD*Ip3.[-l6-K9"$o\11"Vrna6NTjRYDA(mp'G(Tm/"l[an1PtoUeM-G#mCa%GEK8rAl(e*<)BaL8alcR%$R?hY6$o->4!gFVpFaX"^0EjTjU'VS/f!rR8u,5c$JLN:jbXQL@g"\N>El7/,(@h[J54E?9O6A\pN!"%XR4JX!<sj,1)JTB!/L4*aM]LJ)+4et0[dSF<Q/]JDq4"`'#bEj7l9A&lr,c&+i6O0]/c*SA)P]WEbZ#]eaR$%J%2Co*Yf@;`g1`=%qUGLF:AT82f`XIK"UaXV0AK/fD)o\mq(S[%oT@^Kb?8M,n"m5;l*t\2(uCGYR>T>&DraH`@-=4RcP!jHA"DK:-RUR4o;N3O\gI`5%$0B>Cgp(rCUIs]4LK+ptT16k:8lLX1IiW-X`Q*R7,A';0YZ?`l"bhM'di;\Z;o8g\FRbQrSBnHl$p03-XCg91'q\o?6+N9`HF](d%3.<pNZ'#VHT)tTs_tfV0;a&s\P`Xb_:pq3nb'@*kh["f(3r-XJ>t&I<(F*g!_5q['2?Rhu_(:a&N4@ClM_qG[I3Df_GNU3Y7]9L"%CQ7!#,&d\@NklK.N[04](_>nO[mh.?705IppVfJ&PJbf[M3a\NS-G-7Lt4[dA4D>cE@WgJZ7/3;n?:J@:>p@S6a4lX$!*,E`=P$o%38Ob6['#qKV.pW4XW[;M;`i?18SA7&ru\'ide\W/2d&SnAL"AH,=HJlr(OBkYn)#p4uO^K"DK-tG*'NM!,H(_)[,UNjJF+a.PRF/%)]9qSMK18Z>HKBkW-ULTjD\*lr]&B!1)VK9aT8lnZ#*kk#`08DbHDD0p\Uj>Rc<$mX;C$nTh?i>+J47_e9m]!^c4Wk=//aB<!#%u%U^<sP'_q0a=GJA?54in%#KQ<?U%u?Ze0VYL$YEFCgtpkeLthCeqtPgrrE1O^&9qM",ES`aM$^t4SmK1X:<3I)!1C>9J?S0>4b#41%#9La-P=.'(N=(UGcsTR=0^C&(NW$d<+HBOc&$8)3Sr7=BnXC&Z[5oc[OSml;-di03nF(<i-U+d+RN1.?4rV?]7F(A7c<h/b'`*%W%VY<VV$+M@J6C/WkE_9""GPnU'Xd%9=EocRJ,i`[u"rmFt8qd_PdmU<KV4P5hLD@2UGRFA.Z7s#aoNYo\MbHU&Z7:iGd10kF4<EQN%[O7!Mr8Ft3%HgVe/mc%=4dSs*IFj8VF#EGj+6;/;I-CF(S.B_6K\9-SbD1*C4rpi'2_^N<RF1J4VLgd;0T6c<#;0T%7(iE%'LE`)%D&ugTS#1N<_5D(@LRtj)Ic/#[9cD;>!d1^\gsW6UM"OZ9n7,j(IGBA@NHsu#83PWCNXMR;Lt0.rjJB5+TI;`gSoro4kEK8#VSf".%PZ'E@bTa9XcAdo=nK\/;UW*AfpkRl92\C]+*F';3p[WMJ\8r@@_;$3n0Y>'JN02Y+2&#bH-X9RU%e<2=&r.(7(%G_37OUADCd^?(%PB[h"L,54^=56=E/]ZHQ,?;E+%"rHt:o-2V^=#C*em'(`1ic%QPb1pk/K0?@9(7CJ$b)S\onNE*6F1#pCYgF_hieRNO['g!!q7gg%2A>#9P=Iq3.GYGRi-79gjnFE;<-61@G)3K(p3n.2!Y?SCC]jR=cjZJ@JFd[[]Gro-@b<+5*WgAt[W3]?Z3-_:O?>KTMVGt*'H6:4%??Q5i0j1^CK^r-K!VTn:fu)\^4HhHd0A+J_.f6EIHn?)4"-`q;"-+D7L>F3G&RAdIr*2Z&W6:+lplDLY[)]c!c@;)7*XQfj-^)TT%UZEe9:8C@9E%fa8iRBA*QZUK!r-INgM4[EPVJ,([O.@@u6l0<sQq\dJ!].tsmH)lY4o-a*@_:([_om@DhYp2u(9V:S]uj9__3$O/%24r@0n2bnX</q-i3H`sLbZu`jMt`>W8rj<+cn=>-IkMqPU\+He<p>epb3#V_E(7==i:&h!cJ*SCAtK>_"6ZU2rip9LC-)@=qHQ6O%&XI8*1.5SAkO`Ua7D(1E3R<FhB<N81f/@j!'csopboue"dkGbu`*WUl+kV:&_^&\T[TTVfgZ@"uX4&OZ@WM"rplf/q^QR0n&%:10%d<i;1qUdVBlQ+LdPnCZY>j3:+:X>]>*rZf2?ketR*bH@2S*V:)cQm]?lo^W=X'@[;'lc?HEb*H\s4meWHr?o!2ok,"=+N/#3B4>Z%-L:dgX%KLS&O\`d&:'(WnobX?iujCbgm3IMgAMcGBGUhKV?K_`*p+#\bb)^n,InD#WN,S1X&EXu"TMS/SI8lNrinTS0@Z/U$PTSI%388VJfeKeDO=dN&4/pbI+*&f2LM=tlfr`K`OK<P:Ft9m[I,;@PZVu5OVWh^IK]'c@gHB+JY,lP'@og,`G<KER(:/Or[>>K"+T`Kj%(*gZ2P,^T(3T%LD@=)[fo*1$<p;bt6Lq3VmX63+.5SCTT&U.DN`=2XKWji'6DIV13b;:1:FjN7u\^IaXbG_mSB^H8&H+]'bb%N,s%4,_r^P*!!Uk%.,-"&>\@4ouhu^-U+SL&LTDX2CT:VbK>k$K,_;4+$ct^hX+"8#kP?n.N8n>jlC[L@+6j!Lb\sDAE_[V&!=Voi[\!%%`H]a"PUA(VZ>n&f0J6M8!PDIltJa@kol,Se,D4>ln$,(PTC<N4Y=s.(//5B$"`L<U%dUf4m59]G\m]X7ZM`?W,_1h83g2(D7&gj%Dt@0$]b4*YNgr+#S4@F%)8skgIW'a[I^6*M)eTdg#8HY$'&bPMRqTM1'@Rt+56Z6d]e,o=;[t;S]&A#:d9%tXG?KRDP<HC-6>^7Z%OkhK>MPr+noCuTs'Y14=XSO/PVo*s0=rW+M6Zl`%I1o#_/E35Qhi@@JXYLa>8RQL(XI%!D`8^Jc;U=:(VeGapT:TOO1o@Or0&QXJ%f9L-TS/p#-=^Mb"%mMYOF5S,$i\?(V",]7b^i2OJ17jN?#@(n;/=]e)LkBYH]MFP'jEVV%5jfqo)Jh)U-p,6-:O#OAJ5h+s*2.jY%'["J1)Rp`,6M'I=&6\#)(IXNH1B:]fYnse[;>RjE%UtAOq,(;-W52e)AJM?1n\b)'F1g?RY0VC6kM0nqps`HYq`KnE6,`pZe5L&E%HUs-7%r1$DM45^`%,7,#@+(G8\!O7%@tpU122^<FC`JqQNBMc(j4L_UN5r7!`j#jADIG-:gO?-c+W&=)"Lbgq[Hs>]41&7NQXGXt%OIFOq?"Dl8HSk^fnH^fF,rIe8r=3I)X]<9FddQ,Fo!_!3RK;^LI3,@Eof__"qcQqoh#dImb"a-&c@-Oj/i5!2n&+s6a!jj#6tO\=%GY;L!.s?-rLc\]G\4Qs*$/i>,,\U=CnL8/\pDF*4#tYO#(:uq&Ii!+Jk$T"BA'WEj*?K1<5n<c[Jc@44S"qV?\!'/:o=9b.\G(Dj%L0fGgoa'o4DTE4%Xj8!]EOSl#CMqQ+b2jMhoHP)drp-S73UU!$TR`k6&PkQK9oJ]09tpIYI0lT@ErR!^ga%5bj/n4:3k`Li)NM7;%GG[.l(BR,OAPY-Oc#='^h[!.W,#gpZ2bX6N]QT1p?OB`I5mi9L15@<o<ID?r?)bu;_OAftfpQUD9#Z)(#$:(G@THQUEVob+'^IHX%/0F_fZ8bdLFJTUQam;],^m,gsKkMeim-tr+*TB,s51mL^+d.&Amp+_,$UdXgSDiZ62=T6J!On;Aq0=L#F\a3H@?1\GWt3:;O_tsC%_O_p()$9W>&A#(NqW>4Mr`Ih87=Ss#rF=1LZn]?]jA+F>"2:)D>hF`H4Q66G+aB841PHY7@K%H$"HU%-Jj)icn,bE^c0Xg%Xrb\*%B[YsS7i.j"Rn#HT"R2lZ=Y=k/%rf*Qi`lrAq9sm'kCIK4?2`;Qc#^tgYh`lg:2IBimG.LXnW5_M]Zlqr,79G)MV>"`.k??>A$2ij%;MlX$47?VW^8+2l2+*>-RY^R=:[,=,XQ"q<O4%m'=X%5>E(_fN?cCJ*;0A6PJfu8:a;>>*>5HMhk#*kMQ?A?Pj_slNG69uqFWJ:0%\k"'a7Y`29:m8prKd4<i\^3+!99!pG`'J(B`(H3>qtLXZpVY'/rB,\dacaigP/i#>/=`?),;Bd&QkXDQfQ8NWEl2XMcFcFJcYWQ>%l;eq8]i1jg':=3sAf\`eUkIe5(Ur,"F7I8!gib2]@f,=8D_.%J4*-s:$qnJj+31TBW%up*5JaN#>I$nc>c(G58BU!)Z57;+0.5/W%f[glEn*sV9CZC)"222h*%#EHN[2F(/OCB_pC[3e\HkNqX827RI)&"!fq9Y9J`AfC80ru`K]?BnK#UqZD4rT$1f,.Bo2h79C\]>=j%EFjM#W^XGR1<.+5ProF;F)?;XL%=i<@-%4rcup/`Yd2ah0c*:^n\@FI^0K'q2hgm7PpZ2>TuW3er))\o$U(:Zh\T)!PFma=;QG!l%?teV/i,PID'ha(OF"Ko/2J<.^6j.e>`<nTo_p!th&q'#TQXh%_)en88%3KtkVk"%^*TPUm\'!rV-!B#bX%iN6D5^DW-i2g=ae?JU%Crtk,pb1"<[T69'Z$^NuYH:6nq8L6e6cSMB,59\1?>BnN7;MpAK\)ZECN]2:h4p<bX(mk\>*tClGO6Slgn7):2dE8-Mcdf$"Kd:S%o5cFZB+`h)GUA,[<k!,(Y:6Z%_5qO%&;X9+Qf@BuHn:A7lZNd^k&h9l;U+Kur2/C%i[X\"T>XH,h;D.`n?6$$SlL0F&4MN0OJ"XV%'upI&bg,+C1,MLJ@tV!9S_N/cEKB0b,@*//RuJC_Yf=:;GG:7:*INA;=t%6"\A8ObiV%#\V,ecUrHa&dATe+DEe]t5DuqVt.N7C?%4(4"k`G6PW4hfg)s45/@HjP66+bedpk$WZ\@8Y5ja1aasAV^^-KSls2<TY)jX>u#M#e8^lI7t$E?:B3_5&LJJ]>3#<Wf5GP*esYN%N2,:30,!#gK?FmcOS;QV`r&<_`JceigNe<^Ld_R?"mnD_J9&2_#Hmqp/mZu\[QX7miA3E7G7.Sh\-DnTcZjm[Hg7Q8o0/LPhY:8U%l=bB'N9*]B'O0?5iT?)4G+O*9P=ZN3m7?:GP@J'ahur^XPQ/,*,Ah07=oJL&#DHPpK.T_7SR;q;Cb>erKS5%u(bf7t2Cunlm[*n>%YBqm]%NET2;Y@%rV3\MmR\!AlVPhaS-fVHL1]8<C!`*Q=$(7.=ZO[C8cMLj=js(JSFt);uK<U:K_[JXE<$<#'S6dIe/AlX7Zu'L1%%N4]2%\(\/Z=H[?!+YG]BKTHDi?>Ia`U)>[Bt-l(=<s2j..47SqtV>^S:B=7Q#QbWS(cEiH$#Q7N30d3`G"rNPF[8A?O#jF%siC(%$i/N@0$ljmHG0TK@/W42`Il3JOfl/\P\m5$cjQ'5hQabG3>'T0Qe2b9>ljgq5gT5@?E.JL.SX>^(HNUKiW[EFa.KSBHkUKQ7aj!P%@;11oj#IA1K@;G*)P8rB5%?P,Jm]B.Rh4CP[u?ffmUY3@L@65,fheBM$[jolF/TG3WL'#"Ee&ViS>C9oD!FJ?k5V;WNoh.4.dZ5,%(jb2u82AEP\LQf%p+cgT3b-8cI1o/#Z3jrHG(9u7b6d1VLK1"h6;-m(S:'V'`@9us.0i2V]1&*-G/+`?A3pg.(H/UC:I4]%aNp(#%8pQhRI:MU6A//`X!11][\ZnK0EFpes$*@X</O,``bQ>ms[fLEoCp6kn%)t%]]FWbql?SaI\iECoB<#-plI?Bgg?H#ebcHr>eUqBG%4P\n5l^)3INouU7dR@1iFB5"BX(7IMXIY./YVTeU<GV!p`5FGqRaD"Y#sQY4Ns!^ealS;L[M;L>(iRlP^@PoAT$7#td(22O%M$fU%S[@E:ju2?:5UPGLB"Dh/1K3>SJ=2hs`n("aC8QAK3A/fMR]teLT?W`dMYSeA^m1dse5OTI^^6.R_6lK:Wpi)3@cD;b`S@*e28*Mc%@^_5MZh@!.mgQfFMg2r=D0jr_[kTRC3j#fGQJP!K[Ch>9Zl5!k7ajG"bk\*TpQWa-DL=Zo=-u1#5`KH(11kcs/JqJdl4ZCC7c_9X%fF3fZh=S=IG*c$X]]+9tK[61'@]Co`VUG%:<SXeSGiI7'XrNTq-:o,<P1bH1Kgt;SZNZ8=h[ONs;ZH_][q'J2-4>g$jtXk9=(;@6%k-B[AU5i)r43_9mS@`P;YL,QG*]lD:d:5G1a.*Zm?X,=hVEHRY^u\gkZaXLeJUOH^1#)IB.3F[N2&b5s1_6):YGXZa+r`hlZ&%XE%X44CFj-0a%Y%!I-5];]J`>R9%@;d4.@CW'NdS]9Kru?s,+e>#gCYrla-$O)%COrVd6Kk=&)e\bBSn#1[l1<F04!`Wh#6rb1$p(3m%([;DZ_F0#0BN-4[b!`?XFB><*g^reQPh@A79&G+@e(*^ej5N"1.p_+/gK')41AVgX`iOIf'keBY96mS6[Q-1JjUGM/d9XDI2[ne;%H$]'XEFZK!:HAQBCoT(\F3<OY\7IeADHX[C30/?&]+kol^2#E'^YuW*W5UBIpGO\No'J+<qU6F2#UU)i.%eYFK2/bZ:BAIM]pMl=%*V"M4n;rk^$ok,N*:;928:lf"s3Ut3k2;7B5;*=,<cmLN@3St5\j+7p8jVu@A@R:fMWb)EoW>tp#a:I5`EQ@iN>@Wp&KdY#PME!%%Hai..?5F7O`ZHRo9IROZ-ebMJ><G\Qp"VV+fDVD^J%_GD0dbBu!g@*.XKI1(*(K>eit]LWXOA0r%Ft`!HiCTpMK=(sMFV^L*NS.l%^i7$2)n*t[]N!_k'ZkY<=0d.UGCb<Nh6a,q8+e**_kQeebfE$EfZ&iSefE0&.:`Bk26rX^BkH>BiP3st1=GBNE/L@S?&ObVYQ"@)%\TU2[<SRQOm6fp>]L'N%WlS6k4:C32d1%r@$o;lIW=bC5`k,ac`(lp`h!<0>MLJYiR,u1ZoC\^G/ED3`k?2.2D([BJc\5DSMA4-l%B^=B>AR4,Z;\`^%-Zdeg[oeg[)U$q&+@iKu_#F(gpoIcY/oh!HBi__d*ekZM^(3.\%2"\P&I9QhJ]ah5o<*^&>F=TDG\Nb`7KL$j%oa)WoVY2-2fOePraMKEB>L`r\*cC7`MP&lTEkcobeSiHp)4/D-pI1+>dl0*5lRR$bl3le-lch3QqZc69l`H''>])395).kq*t*(D%bcE@DI'nHjEh3p]RNIoo<nVu9ml]u#h0*`6=t-qBX40%%o<<`Cd!Y,#5'R!T=aRZ)m</7Yg:UIc*Rm#,I:o['ol/a78h;LJMoCc,%G231.2q,%`DM%PnNVE=.mBmnnO/56B'%rq50(#Eh@d1&<$H.O8&%=0/FEC(oE0l6_@kkYk'g^BoD&/dgm.QI?jbr8RpQZTI0rG(;%f;M_rgtc/e%\B$bNTsTYq/C/"Bfpf*2J<k7F0W/u7ACT^&<SZ)DP3<3l>iIS?h'ra5JJ:KV:l+^rp(.WdAN@;"o^'GbN0u?j:lP$%Qen#)T>%!8-pY`pPhSX+Z^2E!Wr6t(SON80p2oaB@mhCSs):Fu?fH5uri<gE/Vc2C)dS)<8W#Y=/YI4-lEXhE4G\P>IsG96CWA&\%b9=<m_AfN1Za9eIKXX962n$0E6NEEUL9g$-mapXLE:LZ@p'b_q50U)\B56>.e3^GB!=tgTHK09bHNs.)E=`*GTgeS)eAQT.C%2dt%)#nT^**1pDS`NN+@nW^1ES][8^4GV)KKn(5H,S(HHKk%nZf8>u'GA>rM1l[p7(FG#5hOOc5Pme1XE[\Ddr"Mm4'$$mU?Bo7E%+5g%8c+c0I(B1M(e5*.ju.m+i%,2\-r@\IAZMVs:r#iR^YIGoi<5-YCIRrt4nXLL=:jml>ed$gPq\K'S+INs[$P'RXqttS]K=V?r\qAd%"`DEJ`A0!SqB@$+>rra=/ckq0E\9"_F`"C'*BT/6Y^G*Y&DGcVH*,Mtc:FN*HgF/0`1A8u1aUnQWm8VN'C)j@fiFSR^HcA"A&"7J%^N9d9$.V`jNI0I8\6lki5C^u?=/sG6[P3c5icuE6$=*55c-N?9+[YKlbOS)DVh)i$l2tVn!&Ia9gW'3M$Tm*]HHiWc^:DH`kPOS-%*X'!SPl@9Qli!#^f(m)!ninM,crh'O$KN6Fc)aiKd';D.18_FIOL]c4WfYnL68IFa[]5GBCI7"ep0"F_B!2N?<88P*.V'ftA#,QT%6Ye@bW!\s+-6uD=F&g<J2'LrEB<DT0]d>"sadK.qB!2N?=H>tT$CSRSjG;@\,#oem(MfcXmhr/mB!2O:G%J$k<QOMa+dM>>j1WH'%2'IaXaoPKcZe'm.M<]F*C-iE1^,N,CAG2IRj&JRl=q_NaQ"I-*RCsqXk/q?Z0*bHh)cdV-=rD1aWfYnL6H3f+N`$V_-YeoYW!\s+%-=i?MUK*#l?5#)j*q#Lt+g]dRN7KF!XX[lTjVjoH86$h>f7_(&QF/2QG-3(Q=GEi;fkWps*B?JeaR!E0B)lPF$CSRSjP0?HP>rd4%f7Y-;<p<H#2-N_qe/e@EWfSIVKQIk_s$2M&AF,<.b:nk7AF,<N?%uK%-Y%)=jbI%[-Y%(jd?R'MNg$_,o(/^_=r\o"Dj4,Y""]Ir%YrCh9R1o86YW(!HQQ[-bak.Oes)aXIEAI7-0YT0qi]%g&,?h7)=WBr=2m/#X3uM,=Gf3WYS=BeRZUc#:=gs8>L7UX%jY-8DlH#q3%$E''2"YRJ9)CIl32W2p@,<J>d#$&%.%W(Pj7]uWT3)"(`N!4]gGi[3@gf!AE&*rM.oW$+hH?2&q&pLUe)eU\YUg\43]%u[sI!(-l%QgLLc4V>>7`7+FM*:bNeC(nUs<2VOVJ;aAdRIj*a?:P=0=Rs1Be1^6)f.iTuo-VQMpO)*>2qJQJBX7$nc1->@LHCHY7dp2VcL#r,%/&J@ngl!pS1;2&:$/Es?E\Z/^<pPNjQZ<JE4Sg2H)uXR&s-V!m!HQP4H%!U9SFb9+pU8sos3l89R2Ys8^d%b_"e'0$RcQMJi?5LM%R4HWs27'6hTYL(jmHJ3Lp?Lc5U#1=q8"3#qd8'"HF%r.UfX'c1m"/8gd2;'91u'RTe+4PKGb-^u)Z4gO"9.ZK%,GoZle.`#gTL#7%+2g)Er%QC2[XINQT%qX0I$!)CK+Af\qu[a>nDcT\IV>UPm:[lFL3AOsm,uNAb9<bE^jGmglO]f`Eb3_(F9U)*&E%Oh+b"qQfh_b=%e$-6#Qd"oVoEIo)=p;USkQQ_8V-!%jB=!*Dq&?JBX`Eq%nFVdO[^6CMX7]h;g\82EkM(HPHBRNn*aQ\TKq`b_F_j+l(=@sJT2U#^%@[XeB3.^o9&uJJj[T*Tp`/!g=>%P#Ijr"'jjmj@sbbW_2_]^9QR?_3D=eebJ_m/,GJ5caC>UrX":o]L7T55/(7c:n_7LTAIi-@Rb%McdQ)pjiK_WBf3'U*6Y'joTe"L9m/WM1<Y)ea`5ZoJ1h*VB!fBFYm[e`K'<k3X$@\7VNp(-3\%F%)8q)OiU?WD,^0[2u6Oscp7=G%1J1^`)@f<W&<8.JDitmN\+f%oCsEu`c&LS4s3#bnIYq-p!HDD82Pst$N^nR!]Cbm*0g%UL$hus6?,NLc;IJa?kF*QuV#k(S!f&ZR%[TW._&pU%#1Mt#,Spn">Q/L8VfsY_Q,Y"H@/tjiBo[VoT0]cl``lcIO0r?YihpQ9U'#PbK*fWmrp,Ldo)'OM84<oB[!^+HR%G(dc%W%ar-Yj#g,Z98G\$rFf"5npOD:\S/Q2Bf"/SBH'8:ul7q&8t<PZ!JV.2O\qe"a[<m=H5%2Ei<mXo"`Z&DL=r54VPF6#:*^MS2,6g%Cupn*'L7?bU([\U7T3*V@Q$f!gi#Bn\r(uTj:WS"JoL#':JJA(]SLLblbX+W;]1GZ"F:&GZi\*?@[M-`IM2DrCQ:*F"+D]qYNIm\%JaG#XD2n`"2W2&L9uZ@I&8U$V1[JD_n<4&r+F[3EhO;-_^sB3/p[oAOZ@,+rp.(>TQb`MTE4oGHn"Q[e@?M.*\"9K2fClSeEDa3L%E'*Q2:bgn+KXDLri9D*JEO!T^!d('QQK4%?]Yc::dJ9aV15rA09*0:9]I1j/`/'F3KSAk4[LHS#M(``#iL3oD:Qj-R8a4\rl-o4D%V69dgHd4;XVskhHY]\^0"3uON!*1a-4O&&#Xi&#?05%m>hRY0CJ8;rP2./dMa\m:YZLOIs<X+RLeUNE\6Gi.&R04.uU.ZlA!X-.?%]UA-%1dL&D!XjA5is7rd6H"CA+FH$F=s8i%5p5>l]`3;:7bRPJ#.snEEVh]e0^b1Ld)GbgHVF;HHrSuHN/Oocn(Wk?fJ(DR[T4q?%2XF8;X-ds9U7*2d7:9(BoOBJr-AX>q0Dd?46kjSLqm,Yd[RltK2/KOKmDJLVa8ub1)*:(d]MAjMS^rgQE-d^M6b93"@X92DX[hW;%EGgi@kYY*OIL`+N:ulpk.9D3$:m<r\&`:r`Mc^Qs+bYQ-SNU^!d)]2c/fn$VG*%>G0T<;K]<FGE<n')?6;b_n>TX(m'LXMX5sF)r%D3UJTjWH0!$EO`9JN5`FksS??R-E9(1[tjB*dg`D9d*3H-t%iCV@.K`7nK?TJSSGB+q76(N!;S8"`t&ij>Ll_JZ6Er.Bu0GE?\kH%";)J'YYGYiM?Cp#i%b;'WYCj(+g+oALS#;<!E1A;AL\rk@gd6a575)Z<[XP(_`,%]nUG:>Um_B>r"obKj;8Fnj!]-cb5o:#ng.t=%`:q)+LS.DKaa".#ogaDLk0MN6!oZ_(/V*9kRR4.Vd+<ZsTK&#Sa[r\q'q[EW*<@1;3\$#K3Y<&4l9s>Ok#uB^K]o/[&b&KD61'`C%Nhsru>`1ds_+1.cW+3YQ%mYZ$i;aob(q5=Zi,):JG!L81[R%VKKoSWoeCQs1&n*-XJ@<Shb*>Ka;C80!":cT8l2-E!&I`iuBG8A#%>M'uA9sfVt?6mtYD8N*^!.kmJd`IXpM0;5<Mnrp,TeRZ%s,D\_=GU]Pjn`NnXU1Y/Z6q6hkE7OqUs5JNC<Y@s.k><em\SWqC$/&l%HS<XpNmFT4-[KLp#r^9VL5>4r1M&5a9M%1iUqNmsAoD2X%b<d.ke]?L:f2R2'pWn\fC=/9qA/DhD>?sYR&IL"QfbEGSL<3=]bIps%5+1QMbC=>P4.i/!\+cGk>kbf-T8qLjpE*_q0:bVCUNN1icQG2i[-'XqINSc^Lr],_`a1Iq?h5W$M?~>%AI9_PrivateDataEnd